#!/bin/bash

set -e

initialize_repo() {
  # install
  if [ ! -d $ZMICRO_HOME ]; then
    git clone $ZMICRO_GIT -b $ZMICRO_VERSION $ZMICRO_HOME
    # git clone $ZMICRO_GIT -b master $ZMICRO_HOME
  # else
  #   log::info "[initailize] installed before (3), if you want to update, run 'zmicro update'"
  fi
}

initialize_config() {
  PATH=$ZMICRO_BIN_PATH:$PATH
  zmicro config rc

  zmicro config version
  zmicro config logs
  zmicro config data

  # # Do for MacOS
  # if [ "$(os::is_macos)" != "true" ]; then
  #   zmicro config locale
  #   zmicro config timezone
  # fi

  zmicro config git
}

initialize_depdendencies() {
  # install dependency plugins ...
  require::core_mod "$@"
}

initialize_notifies() {
  #echo "Initialize Notifies"

  if [ "$(os::is_workspace)" = "true" ]; then
    # Enable NOTIFY LOGIN
    notify::login_enable
    # Enable NOTIFY UPDATE
    notify::update_enable
  else
    # Disable NOTIFY LOGIN
    notify::login_disable
    # Disable NOTIFY UPDATE
    notify::update_disable
  fi
}

initialize_ci() {
  # if is ci environment

  # 1. install docker cli
  if [ "$IGNORE_DOCKER_CLI" = "true" ]; then
    # ignore if env is set
    echo "" >>/dev/null
  elif [ "$GITHUB_ACTIONS" = "true" ]; then
    # ignore github action because it already has docker cli
    echo "" >>/dev/null
  else
    # log::info "[$(timestamp)][ci] installing docker cli ..."
    # zmicro package install docker
    echo "do not auto install docker" >>/dev/null
  fi
}

help() {
  echo "update zmicro"
  echo ""
  echo "Usage:"
  echo "  zmicro update [...options]"
  echo "    -p, --plugin <plugin_name | all>    Update all or one plugin"
  echo "    -a, --all   Update core and all plugins"
}

core() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    help
    exit 0
  fi

  # fix git safe.directory
  os::fix_git_safe_directory >>/dev/null 2>&1

  while [[ $# -gt 0 ]]; do
    local key=$1
    local value=$2
    case $key in
    -h | --help)
      help
      exit 0
      ;;
    -u | --update)
      os::set_var is_plugin_update true
      shift
      ;;
    *)
      if [ "$(string::match $key ^-)" = "true" ]; then
        echo "ERROR: unknown parameter \"$key\""
        help
        exit 1
      fi

      shift
      ;;
    esac
  done

  initialize_repo
  initialize_config

  if [ "$is_plugin_update" = "true" ]; then
    initialize_depdendencies -u
  else
    initialize_depdendencies
  fi

  initialize_notifies

  # is ci
  if [ "$(os::is_ci)" = "true" ]; then
    initialize_ci
  fi

  # @TODO add auto update
  if [ "$CI" != "true" ]; then
    zmicro auto update >>/dev/null # 2>&1
  fi

  notify::install
}

run() {
  # Fix Permissions
  os::fix_permissions >>/dev/null 2>&1

  # record update timestamp
  if [ ! -f "$ZMICRO_LOG_UPDATE_TIMESTAMP" ]; then
    sudo touch $ZMICRO_LOG_UPDATE_TIMESTAMP
  fi
  if [ ! -w "$ZMICRO_LOG_UPDATE_TIMESTAMP" ] || [ ! -r "$ZMICRO_LOG_UPDATE_TIMESTAMP" ]; then
    sudo chmod a+rw $ZMICRO_LOG_UPDATE_TIMESTAMP
  fi
  echo $(date +%s) >$ZMICRO_LOG_UPDATE_TIMESTAMP 2>/dev/null

  core $@
}

run $@
