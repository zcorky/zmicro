#!/bin/bash

update_zmicro() {
  local origin_version=$(version::zmicro)
  # log::update PREV

  # Fix Permissions
  os::fix_permissions >>/dev/null 2>&1

  # @FIX core-utils plugin update missin path cause failed to update
  # @TODO will remove
  if [ -d "$ZMICRO_HOME/plugins/core-utils" ]; then
    log::info "[$(timestamp)][env] update core-utils ..."
    cd $ZMICRO_HOME/plugins/core-utils
    git pull origin master >>/dev/null 2>&1
    if [ "$?" != "0" ]; then
      echo "error: failed to update core-utils"
      exit 1
    fi

    # reload core-utils
    log::info "[$(timestamp)][env] reload core-utils ..."
    config::load_dir $ZMICRO_HOME/plugins/core-utils/core
  fi

  # fix git safe.directory
  os::fix_git_safe_directory >>/dev/null 2>&1

  log::update CORE zmicro START

  cd $ZMICRO_HOME

  local tmp_update_log=$(os::tmp_file) # $ZMICRO_LOG_ERROR_PATH
  git pull origin master >>$tmp_update_log 2>&1
  if [ "$?" != "0" ]; then
    # echo "Update ZMicro Error, see $ZMICRO_LOG_UPDATE_PATH"
    # tail -n 50 $tmp_update_log
    cat $tmp_update_log

    cat $tmp_update_log >>$ZMICRO_LOG_ERROR_PATH
    exit -1
  else
    cat $tmp_update_log >>$ZMICRO_LOG_UPDATE_PATH
  fi

  # ensure load core-utils
  env::load_core_utils

  # log::update LATEST
  local new_version=$(version::zmicro)

  log::version $origin_version $new_version

  # log::timestamp "[LATEST_VERSION] ${ZMICRO_VERSION}"

  # update depdendencies
  require::core_mod -u

  # Auto Register After Update
  plugin::register_all $ZMICRO_PLUGINS_PATH

  log::update CORE zmicro END $origin_version $new_version

  # @TODO Ensure Global RC Created
  config::ensure_global_rc

  # login notify check
  notify::login_register_check >/dev/null 2>&1 &

  # @TODO add auto update
  zmicro auto update >/dev/null 2>&1 &

  # update notify check
  notify::update_check $origin_version $new_version >/dev/null 2>&1 &
}

help() {
  echo "update zmicro"
  echo ""
  echo "Usage:"
  echo "  zmicro update [self | plugin_name] [...options]"
  # echo "    -p, --plugin <plugin_name | all>    Update all or one plugin"
  echo "    -a, --all   Update core and all plugins"
}

core() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    help
    exit 0
  fi

  local plugin_name=""
  while [[ $# -gt 0 ]]; do
    local key=$1
    local value=$2
    case $key in
    -h | --help)
      help
      exit 0
      ;;
    # -p | --plugin)
    #   if [ -z "$value" ]; then
    #     log::error "plugin name is required"
    #     exit 1
    #   fi

    #   os::set_var plugin_name $value
    #   shift
    #   shift
    #   ;;
    -a | --all)
      os::set_var update_all true
      shift
      ;;
    -f | --force)
      # @TODO
      sudo rm -rf /tmp/zmicro.*.lock.*
      shift
      ;;
    *)
      if [ "$(string::match $key ^-)" = "true" ]; then
        echo "ERROR: unknown parameter \"$key\""
        help
        exit 1
      fi

      if [ -z $plugin_name ]; then
        plugin_name=$key
      fi
      shift
      ;;
    esac
  done

  # @TODO avoid permission error
  if [ ! -w "$ZMICRO_HOME" ]; then
    os::fix_permissions
  fi

  # if no proxy is specified, check the proxy settings
  if [ -z "$HTTPS_PROXY" ]; then
    # @TODO auto check proxy and using
    local PROXY_IP=""
    local PROXY_PORT=""
    # CUSTOM
    if [ "$(zmicro config get PROXY_IP)" != "" ]; then
      PROXY_IP="$(zmicro config get PROXY_IP)"
      PROXY_PORT="$(zmicro config get PROXY_PORT)"

      if [ "$(net::is_ip $PROXY_IP)" = "true" ]; then
        nc -z -v -n -w 1 $PROXY_IP $PROXY_PORT >>/dev/null 2>&1
        if [ "$?" != "0" ]; then
          PROXY_IP=""
          PROXY_PORT=""
        fi
      else
        curl -I http:/$PROXY_IP:$PROXY_PORT --connect-timeout 3 >>/dev/null 2>&1
        if [ "$?" != "0" ]; then
          PROXY_IP=""
          PROXY_PORT=""
        fi
      fi
    else
      # ClashZ
      nc -z -v -n -w 1 127.0.0.1 17890 >>/dev/null 2>&1
      if [ "$?" = "0" ]; then
        PROXY_IP="127.0.0.1"
        PROXY_PORT="17890"
      else
        # ClashX
        nc -z -v -n -w 1 127.0.0.1 7890 >>/dev/null 2>&1
        if [ "$?" = "0" ]; then
          PROXY_IP="127.0.0.1"
          PROXY_PORT="7890"
        else
          # ShadowsocksX-NG
          nc -z -v -n -w 1 127.0.0.1 1087 >>/dev/null 2>&1
          if [ "$?" = "0" ]; then
            PROXY_IP="127.0.0.1"
            PROXY_PORT="1087"
          fi
        fi
      fi
    fi

    if [ -n "$PROXY_IP" ] && [ -n "$PROXY_PORT" ]; then
      log::debug "[$(timestamp)] using proxy: $PROXY_IP:$PROXY_PORT"
      export https_proxy=http://$PROXY_IP:$PROXY_PORT http_proxy=http://$PROXY_IP:$PROXY_PORT all_proxy=socks5://$PROXY_IP:$PROXY_PORT
      export HTTPS_PROXY=http://$PROXY_IP:$PROXY_PORT HTTP_PROXY=http://$PROXY_IP:$PROXY_PORT ALL_PROXY=socks5://$PROXY_IP:$PROXY_PORT
    fi
  fi

  if [ -n "$plugin_name" ]; then
    if [ "$plugin_name" = "self" ]; then
      update_zmicro
    else
      zmicro plugin update $plugin_name
    fi
  elif [ "$update_all" = "true" ]; then
    update_zmicro
    zmicro plugin update
  else
    update_zmicro
  fi
}

run() {
  core $@
}

run $@
