#!/bin/bash

help() {
  echo "Usage:"
  echo "  zmicro code [options...] <where> [name]"
  echo ""
  echo "options:"
  echo "  -h, --help      help for code"
  echo "  --version       version for code"
  echo "  --apply-proxy   apply proxy for code"
  echo "  --apply-vpn     apply vpn for code"
  echo ""
  echo "where:"
  echo "  home      open zmicro home in vscode"
  echo "  plugin    open plugin in vscode"
  echo "  service   open service in vscode"
  echo "  package   open package in vscode"
  echo "  template  open template in vscode"
  echo "  action    open action in vscode"
  echo "  desktop   open desktop in vscode"
  echo "  project   open project in vscode"
}

core() {
  while [[ "$#" -gt 0 ]]; do
    case $1 in
    -h | --help)
      help
      exit 0
      ;;
    --version)
      log::info "v0.0.1"
      exit 0
      ;;
    --apply-proxy)
      log::info "apply proxy for code"
      net::using_smart_proxy
      ;;
    --apply-vpn)
      log::info "apply vpn for code"
      net::using_smart_proxy
      ;;
    *)
      break
      ;;
    esac
    shift
  done

  which code >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    log::error "you should install vscode and install 'code' command in PATH"
    log::info "How to install 'code' command in PATH: https://code.visualstudio.com/docs/setup/mac"
    exit 1
  fi

  local where=$1
  local name=$2
  if [ "$where" = "-h" ] || [ "$where" = "--help" ]; then
    help
    exit 1
  fi

  if [ -z "$where" ]; then
    where="home"
  fi

  # # where => default plugin when name exist
  # # zmicro go package
  # #   => zmicro go plugin package
  # if [ -n "$where" ] && [ "$where" != "home" ] && [ "$where" != "plugin" ] && [ "$where" != "service" ] && [ "$where" != "package" ]; then
  #   where="plugin"
  #   name=$1
  # fi

  # echo "where: $where"
  # echo "name: $name"

  # fix permissions
  os::fix_permissions

  case $where in
  home)
    cd $ZMICRO_HOME
    code .
    ;;
  plugin)
    if [ -z "$name" ]; then
      log::error "plugin name is required"
      exit 1
    fi

    local plugin_path=$ZMICRO_HOME/plugins/$name
    if [ ! -d $plugin_path ]; then
      # log::error "plugin (${name}) not found"
      # exit 1

      log::info "plugin (${name}) not found, downloading ..."
      zmicro plugin download $name
      if [ "$?" != "0" ]; then
        log::error "plugin (${name}) download failed"
        exit 1
      fi
    fi

    cd $plugin_path
    code .
    ;;
  service)
    local path=$ZMICRO_HOME/plugins/${where}
    if [ ! -d $path ]; then
      log::error "plugin(${where}) not found (1)"
      exit 1
    fi

    if [ -n "$name" ]; then
      path=$path/${where}s/$name
    fi
    if [ ! -d $path ]; then
      # log::error "${where}(${name}) not found"
      # exit 1
      log::info "${where}(${name}) not found, downloading ..."
      zmicro service download $name
      if [ "$?" != "0" ]; then
        log::error "service (${name}) download failed"
        exit 1
      fi
    fi

    cd $path
    code .
    ;;
  package)
    local path=$ZMICRO_HOME/plugins/${where}
    if [ ! -d $path ]; then
      log::error "package(${where}) not found (2)"
      exit 1
    fi

    if [ -n "$name" ]; then
      path=$path/${where}s/$name
    fi
    if [ ! -d $path ]; then
      # log::error "${where}(${name}) not found"
      # exit 1

      log::info "${where}(${name}) not found, downloading ..."
      zmicro package download $name
      if [ "$?" != "0" ]; then
        log::error "package (${name}) download failed"
        exit 1
      fi
    fi

    cd $path
    code .
    ;;
  template)
    local path=$ZMICRO_HOME/plugins/${where}
    if [ ! -d $path ]; then
      log::error "template(${where}) not found (2)"
      exit 1
    fi

    if [ -n "$name" ]; then
      path=$path/${where}s/$name
    fi
    if [ ! -d $path ]; then
      # log::error "${where}(${name}) not found"
      # exit 1

      log::info "${where}(${name}) not found, downloading ..."
      zmicro template download $name
      if [ "$?" != "0" ]; then
        log::error "template (${name}) download failed"
        exit 1
      fi
    fi

    cd $path
    code .
    ;;
  action)
    local path=$ZMICRO_HOME/plugins/${where}
    if [ ! -d $path ]; then
      log::error "action(${where}) not found (2)"
      exit 1
    fi

    if [ -n "$name" ]; then
      path=$path/${where}s/$name
    fi
    if [ ! -d $path ]; then
      # log::error "${where}(${name}) not found"
      # exit 1

      log::info "${where}(${name}) not found, downloading ..."
      zmicro action download $name
      if [ "$?" != "0" ]; then
        log::error "action (${name}) download failed"
        exit 1
      fi
    fi

    cd $path
    code .
    ;;
  desktop)
    local path=$ZMICRO_HOME/plugins/${where}
    if [ ! -d $path ]; then
      log::error "desktop(${where}) not found (2)"
      exit 1
    fi

    if [ -n "$name" ]; then
      path=$path/${where}s/$name
    fi
    if [ ! -d $path ]; then
      # log::error "${where}(${name}) not found"
      # exit 1

      log::info "${where}(${name}) not found, downloading ..."
      zmicro desktop download $name
      if [ "$?" != "0" ]; then
        log::error "desktop (${name}) download failed"
        exit 1
      fi
    fi

    cd $path
    code .
    ;;
  project)
    local path=$HOME/code

    if [ -z "$name" ]; then
      log::error "project name is required"
      exit 1
    fi

    # if name is not a string contains one '/'        => throw error
    # if name = zcorky/zmicro                         => path=$HOME/code/github.com/zcorky/zmicro
    # if name = github.com/zcorky/zmicro              => path=$HOME/code/github.com/zcorky/zmicro
    # if name = https://github.com/zcorky/zmicro      => path=$HOME/code/github.com/zcorky/zmicro
    # if name = https://github.com/zcorky/zmicro.git  => path=$HOME/code/github.com/zcorky/zmicro
    # if name = http://git.zcorky.com/zcorky/zmicro   => path=$HOME/code/git.zcorky.com/zcorky/zmicro

    # remove https:// or http://
    if [[ $name == "http"* ]] || [[ $name == "https"* ]]; then
      name=$(echo $name | sed 's/https\?:\/\///g')
    fi

    # remove .git
    if [[ $name == *".git" ]]; then
      name=$(echo $name | sed 's/\.git//g')
    fi

    # if name contains one '/' => add github.com
    if [[ $name == *"/"* ]]; then
      name=github.com/$name
    fi

    # check if name contains two '/'
    if [[ $name != *"/"*"/"* ]]; then
      log::error "project name($name) is invalid"
      exit 1
    fi

    path=$path/$name

    if [ ! -d $path ]; then
      # log::error "${where}(${name}) not found"
      # exit 1

      log::info "${where}(${name}) not found, downloading ..."
      zmicro project add $name
      if [ "$?" != "0" ]; then
        log::error "project (${name}) download failed"
        exit 1
      fi
    fi

    if [ ! -d $path ]; then
      log::error "project(${where}) not found (2)"
      exit 1
    fi

    cd $path
    code .
    ;;
  *)
    # fallback to plugin
    name=$where

    if [ -z "$name" ]; then
      log::error "plugin name is required"
      exit 1
    fi

    local plugin_path=$ZMICRO_HOME/plugins/$name
    if [ ! -d $plugin_path ]; then
      # log::error "plugin (${name}) not found (3)"
      # exit 1

      log::info "plugin (${name}) not found, downloading ..."
      zmicro plugin download $name
      if [ "$?" != "0" ]; then
        log::error "plugin (${name}) download failed"
        exit 1
      fi
    fi

    cd $plugin_path
    code .
    ;;
  esac
}

run() {
  core $@
}

run $@
