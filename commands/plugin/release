#!/bin/bash

required() {
  if [ "$1" = "" ]; then
    echo false
  else
    echo true
  fi
}

help() {
  echo "Usage:"
  echo "  zmicro plugin release <plugin_name> [plugin_child_name | .]"
  echo ""
}

core() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    help
    exit 0
  fi

  local plugin_type=plugin
  local plugin_name=$1
  local plugin_child_name=$2
  if [ "$plugin_name" = "" ]; then
    log::error "plugin name is required"
    exit 1
  fi

  if [ "$plugin_name" = "." ] || [ "$plugin_child_name" = "." ]; then
    local path=$(dirname $PWD)
    local relative_path=${path#$ZMICRO_PLUGINS_PATH}
    if [ "$path" = "$ZMICRO_PLUGINS_PATH" ]; then
      plugin_name=$(basename $PWD)
    elif [ "$path" != "$relative_path" ] && [ -n "$relative_path" ]; then
      local pre_plugin_name=$(echo $relative_path | awk -F "/" '{print $2}')
      local pre_plugin_children_dir=$(echo $relative_path | awk -F "/" '{print $3}')

      if [ "$pre_plugin_name" != "" ]; then
        # 1. release a plugin
        if [ "$pre_plugin_children_dir" = "" ]; then
          os::inquirer value confirm "是否发布当前 plugin <$pre_plugin_name> ？"
          if [ "$value" = "true" ]; then
            plugin_name=$pre_plugin_name
          else
            log::info "PUBLISH CANCELLED"
            exit 0
          fi
        else
          plugin_name=$pre_plugin_name

          # 2. release a child of a plugin
          local pre_plugin_child_name=$(basename $PWD)
          os::inquirer value confirm "是否发布当前 ${pre_plugin_name} <$pre_plugin_child_name> ？"
          if [ "$value" = "true" ]; then
            plugin_child_name=$pre_plugin_child_name
          else
            log::info "PUBLISH CANCELLED"
            exit 0
          fi
        fi
      else
        log::error "[$(timestamp)][service::release] custom dir($path) is not a plugin"
        exit 1
      fi

      # update plugin type
      plugin_type=$plugin_name
    else
      log::error "[$(timestamp)][service::release] custom dir($path) is not a plugin or plugin children"
      exit 1
    fi
  fi

  # @TODO
  local project_path=$ZMICRO_PLUGINS_PATH/$plugin_name
  if [ -n "$plugin_child_name" ]; then
    project_path=$project_path/${plugin_name}s/$plugin_child_name
  fi

  # cd to project path
  cd $project_path

  # local origin_version=$(plugin::get_version $plugin_name)
  local origin_version=$(cat mod | grep "VERSION" | awk -F "=" '{print $2}')
  local default_new_version=$(version::next $origin_version)

  local is_valid="false"
  while [ "$is_valid" = "false" ]; do
    if [ -z "$plugin_child_name" ]; then
      os::inquirer new_version "text" "[$(color::green plugin.${plugin_name})] Input new version(current: ${origin_version}):" "$default_new_version"
    else
      os::inquirer new_version "text" "[$(color::green ${plugin_name}.${plugin_child_name})] Input new version(current: ${origin_version}):" "$default_new_version"
    fi

    is_valid=$(version::is_valid $new_version)

    if [ "$is_valid" = "false" ]; then
      log::error "${new_version} is not valid version, should be x.y.z"
    fi

    if [ "$(version::compare_gt $new_version $origin_version)" = "false" ]; then
      log::error "${new_version} is not greater than ${origin_version}"
      is_valid="false"
    fi
  done

  sed -i -e "s/${origin_version}/$new_version/" mod >>/dev/null 2>&1

  #@TODO mod-e file occurred
  if [ -f "mod-e" ]; then
    rm mod-e >>/dev/null 2>&1
  fi

  local is_first_release=false
  local tmp_error_log=$(os::tmp_file)
  log::info "[$(timestamp)] checking with remote master ..."
  if [ "$(git::has_branch master)" = "true" ]; then
    log::info "[$(timestamp)] merging remote master ..."
    git pull origin master >>/dev/null 2>$tmp_error_log
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)] failed to merge remote master"
      cat $tmp_error_log
      return 1
    fi
  else
    echo "new empty repo => no merge" >>/dev/null
    is_first_release=true
  fi

  log::info "[$(timestamp)] creating new version: ${new_version} ..."
  git add mod
  git commit -m "chore(release): bumped version to ${new_version}" >>/dev/null

  if [ "$is_first_release" = "true" ]; then
    log::info "[$(timestamp)] pushing version to master ..."
    git push origin master >>/dev/null 2>$tmp_error_log
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)] failed to release ${new_version}: push master error"
      cat $tmp_error_log
      return 1
    fi
  fi

  git tag | grep "${new_version}" >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    local actions=("Override" "ignore")

    log::info "[$(timestamp)] checking new version is exist(${new_version}) ..."
    os::inquirer action "select" actions "Version ${new_version} already exists，Override or ignore ?"
    if [ "$action" = "Override" ]; then
      git tag ${new_version} -f

      log::info "[$(timestamp)] pushing version to tag ..."
      git push origin ${new_version} -f >>/dev/null 2>$tmp_error_log
      if [ "$?" != "0" ]; then
        log::error "[$(timestamp)] failed to release ${new_version}: push tag error"
        cat $tmp_error_log
        return 1
      fi

      if [ "$is_first_release" != "true" ]; then
        log::info "[$(timestamp)] pushing version to master ..."
        git push origin master >>/dev/null 2>$tmp_error_log
        if [ "$?" != "0" ]; then
          log::error "[$(timestamp)] failed to release ${new_version}: push master error"
          cat $tmp_error_log
          return 1
        fi
      fi

      log::success "[plugin][release] ${plugin_name} ${new_version}"
    else
      git push origin master >>/dev/null
      log::success "[plugin][release] cancel publish version (${new_version})"
    fi
  else
    git tag ${new_version} -f

    log::info "[$(timestamp)] pushing version to tag ..."
    git push origin ${new_version} -f >>/dev/null 2>$tmp_error_log
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)] failed to release ${new_version}: push tag error"
      cat $tmp_error_log
      return 1
    fi

    if [ "$is_first_release" != "true" ]; then
      log::info "[$(timestamp)] pushing version to master ..."
      git push origin master >>/dev/null 2>$tmp_error_log
      if [ "$?" != "0" ]; then
        log::error "[$(timestamp)] failed to release ${new_version}: push master error"
        cat $tmp_error_log
        return 1
      fi
    fi

    log::success "[$(timestamp)] succeed to release($(color::green ${plugin_name}.${plugin_child_name})): $(color::green ${new_version})"
  fi
}

run() {
  core $@
}

run $@
