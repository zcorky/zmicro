#!/bin/bash

function test_version::is_valid() {
  testing::expect \
    "${FUNCNAME[0]} - ok" \
    "to_equal" \
    "true" \
    "$(version::is_valid v1.2.3)" 
  
  testing::expect \
    "${FUNCNAME[0]} - ok" \
    "to_equal" \
    "true" \
    "$(version::is_valid v100.200.300)" 

  testing::expect \
    "${FUNCNAME[0]} - empty" \
    "to_equal" \
    "false" \
    "$(version::is_valid)" 
  
  testing::expect \
    "${FUNCNAME[0]} - not prefix v" \
    "to_equal" \
    "false" \
    "$(version::is_valid 1.2.3)" 

  testing::expect \
    "${FUNCNAME[0]} - not three 1" \
    "to_equal" \
    "false" \
    "$(version::is_valid v1)" 

  testing::expect \
    "${FUNCNAME[0]} - not three 2" \
    "to_equal" \
    "false" \
    "$(version::is_valid v1.2)" 
}

function test_version::compare_gt() {
  testing::expect \
    "${FUNCNAME[0]} - v1.2.5 > v1.2.4" \
    "to_equal" \
    "true" \
    "$(version::compare_gt v1.2.5 v1.2.4)" 

  testing::expect \
    "${FUNCNAME[0]} - v1.2.4 > v1.2.4" \
    "to_equal" \
    "false" \
    "$(version::compare_gt v1.2.4 v1.2.4)" 

  testing::expect \
    "${FUNCNAME[0]} - v1.2.3 > v1.2.4" \
    "to_equal" \
    "false" \
    "$(version::compare_gt v1.2.3 v1.2.4)" 

  testing::expect \
    "${FUNCNAME[0]} - v1.1.5 > v1.2.4" \
    "to_equal" \
    "false" \
    "$(version::compare_gt v1.1.5 v1.2.4)" 

  testing::expect \
    "${FUNCNAME[0]} - v0.3.5 > v1.2.4" \
    "to_equal" \
    "false" \
    "$(version::compare_gt v0.3.5 v1.2.4)" 
}

function test_version::compare_lt() {
  testing::expect \
    "${FUNCNAME[0]} - v1.2.5 < v1.2.4" \
    "to_equal" \
    "false" \
    "$(version::compare_lt v1.2.5 v1.2.4)" 

  testing::expect \
    "${FUNCNAME[0]} - v1.2.4 < v1.2.4" \
    "to_equal" \
    "false" \
    "$(version::compare_lt v1.2.4 v1.2.4)" 

  testing::expect \
    "${FUNCNAME[0]} - v1.2.3 < v1.2.4" \
    "to_equal" \
    "true" \
    "$(version::compare_lt v1.2.3 v1.2.4)" 

  testing::expect \
    "${FUNCNAME[0]} - v1.1.5 < v1.2.4" \
    "to_equal" \
    "true" \
    "$(version::compare_lt v1.1.5 v1.2.4)" 

  testing::expect \
    "${FUNCNAME[0]} - v0.3.5 < v1.2.4" \
    "to_equal" \
    "true" \
    "$(version::compare_lt v0.3.5 v1.2.4)" 
}

function test_version::next() {
  testing::expect \
  "${FUNCNAME[0]} - v1.2.5 => v1.2.6" \
  "to_equal" \
  "v1.2.6" \
  "$(version::next v1.2.5)"
}

function test_version_semver() {
  testing::expect \
  "${FUNCNAME[0]} - major(v1.2.5) => v1" \
  "to_equal" \
  "v1" \
  "$(version::get_major v1.2.5)"

  testing::expect \
  "${FUNCNAME[0]} - minor(v1.2.5) => v1.2" \
  "to_equal" \
  "v1.2" \
  "$(version::get_minor v1.2.5)"

  testing::expect \
  "${FUNCNAME[0]} - patch(v1.2.5) => v1.2.5" \
  "to_equal" \
  "v1.2.5" \
  "$(version::get_patch v1.2.5)"
}

function test_version_semver_with_prefix() {
  testing::expect \
  "${FUNCNAME[0]} - major(v1.2.5, vvv) => vvv1" \
  "to_equal" \
  "vvv1" \
  "$(version::get_major v1.2.5 vvv)"

  testing::expect \
  "${FUNCNAME[0]} - minor(v1.2.5, vvv) => vvv1.2" \
  "to_equal" \
  "vvv1.2" \
  "$(version::get_minor v1.2.5 vvv)"

  testing::expect \
  "${FUNCNAME[0]} - patch(v1.2.5, vvv) => vvv1.2.5" \
  "to_equal" \
  "vvv1.2.5" \
  "$(version::get_patch v1.2.5 vvv)"
}