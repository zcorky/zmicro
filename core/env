#!/bin/bash

env::ensure_vars() {
  if [ -z "$ZMICRO_CONFIG_PATH" ]; then
    ZMICRO_CONFIG_PATH=$ZMICRO_HOME/config
  fi
  if [ -z "$ZMICRO_CORE_PATH" ]; then
    ZMICRO_CORE_PATH=$ZMICRO_HOME/core
  fi
  if [ -z "$ZMICRO_PLUGINS_PATH" ]; then
    ZMICRO_PLUGINS_PATH=$ZMICRO_HOME/plugins
  fi
}

env::ensure_core_utils() {
  if [ ! -d "$ZMICRO_HOME/plugins/core-utils" ]; then
    git clone https://github.com/zmicro-design/plugin-core-utils $ZMICRO_HOME/plugins/core-utils >>/dev/null 2>&1
    if [ "$?" != "0" ]; then
      echo "error: failed to install core-utils"
      exit 1
    fi
  fi
}

env() {
  env::ensure_vars

  env::ensure_core_utils

  # Load Base Config
  . $ZMICRO_CONFIG_PATH/config

  # echo "======== load env start ====================" >>$ZMICRO_LOG_COMMON_PATH

  # Load Doreamon Fns
  # load config
  . $ZMICRO_CORE_PATH/config
  # load timestamp
  . $ZMICRO_CORE_PATH/timestamp
  # load os
  . $ZMICRO_CORE_PATH/os
  # load color
  . $ZMICRO_CORE_PATH/color
  # load log
  . $ZMICRO_CORE_PATH/log
  # load check
  . $ZMICRO_CORE_PATH/check
  # load commander
  . $ZMICRO_CORE_PATH/commander
  # load run
  . $ZMICRO_CORE_PATH/run
  # load core-utils
  env::load_core_utils

  # fix
  if [ -z "$USER" ]; then
    export USER=$(os::username)
  fi

  if [ ! -w "$ZMICRO_LOG_PATH" ]; then
    os::ensure_logs_permission
  fi

  # fix git safe.directory
  git::fix_permissions >>/dev/null 2>&1

  # 配置加载顺序
  # 1. mod
  config::load_core_mod
  # 2. Load Config config/*
  config::load_dir $ZMICRO_CONFIG_PATH
  # 3. Load User Config .zmicrorc
  [[ ! -f $ZMICRO_RC ]] && touch $ZMICRO_RC
  [[ ! -w $ZMICRO_RC ]] && sudo chown $USER $ZMICRO_RC

  config::load_file $ZMICRO_RC

  # # Do for mac os
  # if [ "$(os::is_macos)" = "true" ]; then
  #   export ZMICRO_APP_LOGS_PATH=$HOME/.local/zmicro/logs
  #   export ZMICRO_APP_DATA_PATH=$HOME/.local/zmicro/data
  # fi

  # @TODO fix log permissions
  if [ ! -f $ZMICRO_LOG_COMMON_PATH ]; then
    if [ ! -w $ZMICRO_LOG_PATH ]; then
      sudo touch $ZMICRO_LOG_COMMON_PATH
      sudo chmod 777 $ZMICRO_LOG_COMMON_PATH
    else
      touch $ZMICRO_LOG_COMMON_PATH
      chmod 777 $ZMICRO_LOG_COMMON_PATH
    fi
  fi

  # perf: Core Utils Loaded
  # @TODO zmicro vscode will make env infect cause vscode can't find zsh
  # export ZMICRO_CORE_UTILS_LOADED=true

  # @TODO check upgrade
  # 1. CI ignore check upgrade ...
  # 2. Docker Container ignore check upgrade ...
  if [ "$CI" != "true" ] && [ ! -f "/.dockerenv" ]; then
    # Need has ZMICRO_MAIN_ACTION
    if [ -n "ZMICRO_MAIN_ACTION" ]; then
      case $ZMICRO_MAIN_ACTION in
      update | upgrade)
        # update
        ;;
      install | initialize)
        # install
        ;;
      version | -v)
        # show version
        ;;
      code | go | fn)
        # open code
        ;;
      proxy)
        # use proxy
        ;;
      config)
        # use config
        ;;
      apply)
        # use apply
        ;;
      *)
        check::upgrade
        ;;
      esac
    fi
  fi

  # echo "======== load env end ====================" >>$ZMICRO_LOG_COMMON_PATH
}

env::load_core_utils() {
  # command -v version::zmicro >/dev/null 2>&1
  #if [ "$ZMICRO_CORE_UTILS_LOADED" = "false" ]; then
  #  if [ -d "$ZMICRO_PLUGINS_PATH/core-utils/core" ]; then
  #    config::load_dir $ZMICRO_PLUGINS_PATH/core-utils/core
  #  fi
  # fi

  # check core utils whether loaded or not
  # command -v version::main >/dev/null 2>&1
  command -v plugin::update >/dev/null 2>&1
  if [ "$?" != "0" ]; then
    if [ -d "$ZMICRO_PLUGINS_PATH/core-utils/core" ]; then
      config::load_dir $ZMICRO_PLUGINS_PATH/core-utils/core
    fi
  fi
}

env

# Get env by name
#
# @Example:
#   local key
#   env::get $key
env::get() {
  local key=$1
  echo ${!key}
}

env::set() {
  local key=$1
  local value=$2
  eval "export $key=\"$value\""
}

export -f env::get
export -f env::set

export -f env::load_core_utils

export -f env::ensure_vars
export -f env::ensure_core_utils
