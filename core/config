#!/bin/bash

load_config() {
  # @TOREMOVE
  # Fix Old ZMICRORC
  local old_home=$(config::get HOME)
  if [ "$old_home" != "" ]; then
    log::debug "remove old config .zmicrorc"

    config::remove HOME
    config::remove BIN
    config::remove VERSION
  fi

  CONFIG_PATH=$1
  if [ "$CONFIG_PATH" = "" ]; then
    log "load_config: Config Path is required"
    exit 1
  fi

  if [ ! -f $CONFIG_PATH ] && [ ! -d $CONFIG_PATH ]; then
    log "load_config: Config Path(${CONFIG_PATH}) not found"
    exit 1
  fi

  # config::load_core_mod

  if [ -f $CONFIG_PATH ]; then
    config::load_file $CONFIG_PATH
  elif [ -d $CONFIG_PATH ]; then
    config::load_dir $CONFIG_PATH
  else
    log "load_config: Invalid Config Path(${CONFIG_PATH})"
    exit 1
  fi
}

config::load_file() {
  local CONFIG_FILE=$1

  if [ -z "$CONFIG_FILE" ]; then
    log::error "[config::load_file] config file path is required"
    exit 1
  fi

  if [ -f $CONFIG_FILE ]; then
    log::debug "[$(timestamp)][config::load_file]: $CONFIG_FILE"

    # \. $CONFIG_FILE
    . $CONFIG_FILE
  fi
}

config::load_dir() {
  CONFIG_DIR=$1
  CONFIG_FILES=$(ls $CONFIG_DIR)

  for CONFIG_FILE in $CONFIG_FILES; do
    # echo "load config: $CONFIG_FILE"

    config::load_file $CONFIG_DIR/$CONFIG_FILE
  done
}

config::load_mod() {
  local path=$1
  local mod_path=$path/mod
  if [ ! -f "$mod_path" ]; then
    log::error "[config::load_mod] path is required"
    exit 1
  fi

  config::load_file $mod_path

  if [ -z $VERSION ] && [ -z $PLUGIN_VERSION ]; then
    log::error "[config::load_mod] VERSION is required"
    exit 1
  fi

  # @TODO REMOVE next version
  export ZMICRO_VERSION=$VERSION
  export ZMICRO_DESCRIPTION=$DESCRIPTION
}

config::load_core_mod() {
  config::load_mod $ZMICRO_HOME
}

config::load_user_config() {
  [[ -f $ZMICRO_RC ]] && load_config $ZMICRO_RC
}

config::get() {
  local key=$1
  local filepath=$2
  if [ -z "$filepath" ]; then
    filepath=$ZMICRO_RC
  fi

  if [ ! -f "$filepath" ]; then
    log::error "[config::get] config file ($filepath) not found"
    exit 1
  fi

  local value=$(cat $filepath | grep "${key}=" | awk -F '=' '{print $2}')
  echo $value
}

config::set() {
  local key=$1
  local value=$2
  local filepath=$3

  if [ -z "$filepath" ]; then
    filepath=$ZMICRO_RC
  elif [ ! -f "$filepath" ]; then
    log::error "[config::set] file(${filepath}) not found"
    exit 1
  fi

  local line=""
  # If not found, return empty string
  if [ -f $filepath ]; then
    set +e
    line=$(cat $filepath | grep "${key}=")
    set -e
  fi

  # New Key
  if [ "$line" = "" ]; then
    echo "${key}=${value}" >>$filepath
    return
  fi

  # Old Key
  local newLine="${key}=${value}"
  # echo "old: $line"
  # echo "new: $newLine"
  sed -i -e "s%${line}%${newLine}%g" $filepath
  if [ "$?" != "0" ]; then
    log::error "[config::set] failed to set key(${key}) value(${value})"
    exit 1
  fi
}

config::remove() {
  local key=$1
  local line=$(cat $ZMICRO_RC | grep "${key}=")

  # New Key
  if [ "$line" != "" ]; then
    sed -i -e "s%${line}%%g" $ZMICRO_RC
    sed -i "/^\s*$/d" $ZMICRO_RC
  fi
}

config::list() {
  less $ZMICRO_RC
}

config::check_or_set() {
  load inquirer
  local key=$1
  local type=$2
  local filepath=$3
  if [ -z "$key" ]; then
    log::error "[config::check_or_set] key is required"
    exit 1
  fi

  if [ -z "$type" ]; then
    log::error "[config::check_or_set] type is required, options: text, yesno"
    exit 1
  fi
  
  if [ -z "$filepath" ]; then
    log::error "[config::check_or_set] filepath is required"
    exit 1
  fi

  if [ ! -f "$filepath" ]; then
    log::error "[config::check_or_set] config file ($filepath) not found"
    exit 1
  fi

  # local value=$(env::get $key)
  local value=$(config::get $key $filepath)

  # apply env
  if [ -z "$value" ]; then
    value=$(env::get $key)
  fi

  if [ -z "$value" ]; then
    if [ "$type" = "text" ]; then
      inquirer::text "请输入 $key:" value
    elif [ "$type" = "yesno" ]; then
      local choices=("Yes" "No")
      inquirer::select "是否启用 $key?" choices value
      if [ "$value" = "Yes" ]; then
        value="true"
      else
        value="false"
      fi
    else 
      log::error "[config::check_or_set] invalid type($type), options: text, yesno"
      exit 1
    fi
  fi

  # echo "key: $key, value: $value"
  config::set $key $value $filepath
}

config::export() {
  local filepath=$1
  if [ -z "$filepath" ]; then
    log::error "[config::export] filepath is required"
    exit 1
  fi

  if [ ! -f "$filepath" ]; then
    log::error "[config::export] config file ($filepath) not found"
    exit 1
  fi

  while read line; do
    if [[ $line = "" ]]; then
      continue
    fi

    local key=$(echo $line | awk -F '=' '{print $1}')
    local value=$(echo $line | awk -F '=' '{print $2}')

    # echo "export $key=$value"
    export $key=$value
  done < $filepath
}

export -f config::load_file
export -f config::load_dir

export -f load_config

export -f config::load_mod
export -f config::load_core_mod
export -f config::load_user_config

export -f config::list
export -f config::get
export -f config::set
export -f config::remove

export -f config::check_or_set
export -f config::export