#!/bin/bash

load_config() {
  # @TOREMOVE
  # Fix Old ZMICRORC
  # local old_home=$(config::get HOME)
  # if [ "$old_home" != "" ]; then
  #   log::debug "remove old config .zmicrorc"

  #   config::remove HOME
  #   config::remove BIN
  #   config::remove VERSION
  # fi

  CONFIG_PATH=$1
  if [ "$CONFIG_PATH" = "" ]; then
    log "load_config: Config Path is required"
    exit 1
  fi

  if [ ! -f $CONFIG_PATH ] && [ ! -d $CONFIG_PATH ]; then
    log "load_config: Config Path(${CONFIG_PATH}) not found"
    exit 1
  fi

  # config::load_core_mod

  if [ -f $CONFIG_PATH ]; then
    config::load_file $CONFIG_PATH
  elif [ -d $CONFIG_PATH ]; then
    config::load_dir $CONFIG_PATH
  else
    log "load_config: Invalid Config Path(${CONFIG_PATH})"
    exit 1
  fi
}

config::load_file() {
  local CONFIG_FILE=$1

  if [ -z "$CONFIG_FILE" ]; then
    log::error "[config::load_file] config file path is required"
    exit 1
  fi

  if [ -f $CONFIG_FILE ]; then
    log::debug "[$(timestamp)][config::load_file]: $CONFIG_FILE"

    # \. $CONFIG_FILE
    . $CONFIG_FILE
  fi
}

config::load_dir() {
  CONFIG_DIR=$1
  CONFIG_FILES=$(ls $CONFIG_DIR)

  for CONFIG_FILE in $CONFIG_FILES; do
    # echo "load config: $CONFIG_FILE"

    config::load_file $CONFIG_DIR/$CONFIG_FILE
  done
}

config::load_mod() {
  local path=$1
  local mod_path=$path/mod
  if [ ! -f "$mod_path" ]; then
    log::error "[config::load_mod] path is required"
    exit 1
  fi

  config::load_file $mod_path

  if [ -z $VERSION ] && [ -z $PLUGIN_VERSION ]; then
    log::error "[config::load_mod] VERSION is required"
    exit 1
  fi

  # @TODO REMOVE next version
  export ZMICRO_VERSION=$VERSION
  export ZMICRO_DESCRIPTION=$DESCRIPTION
}

config::load_core_mod() {
  config::load_mod $ZMICRO_HOME
}

config::load_user_config() {
  [[ -f $ZMICRO_RC ]] && load_config $ZMICRO_RC
}

config::get() {
  local key=$1
  local filepath=$2
  local default_value=$3
  if [ -z "$filepath" ]; then
    filepath=$ZMICRO_RC
  fi

  if [ ! -f "$filepath" ]; then
    log::error "[config::get] config file ($filepath) not found"
    exit 1
  fi

  local value=$(cat $filepath | grep "${key}=" | awk -F '=' '{print $2}')
  if [ -z "$value" ]; then
    value=$default_value
  fi

  echo $value
}

config::set() {
  local key=$1
  local value=$2
  local filepath=$3

  if [ -z "$filepath" ]; then
    filepath=$ZMICRO_RC
  elif [ ! -f "$filepath" ]; then
    log::error "[config::set] file(${filepath}) not found"
    exit 1
  fi

  local line=""
  # If not found, return empty string
  if [ -f $filepath ]; then
    set +e
    line=$(cat $filepath | grep "${key}=")
    set -e
  fi

  # New Key
  if [ "$line" = "" ]; then
    echo "${key}=${value}" >>$filepath
    return
  fi

  # Old Key
  local newLine="${key}=${value}"
  # echo "old: $line"
  # echo "new: $newLine"
  sed -i -e "s%${line}%${newLine}%g" $filepath
  if [ "$?" != "0" ]; then
    log::error "[config::set] failed to set key(${key}) value(${value})"
    exit 1
  fi
}

config::remove() {
  local key=$1
  local filepath=$2

  if [ -z "$filepath" ]; then
    filepath=$ZMICRO_RC
  elif [ ! -f "$filepath" ]; then
    log::error "[config::remove] file(${filepath}) not found"
    exit 1
  fi

  local line=$(cat $filepath | grep "${key}=")

  # New Key
  if [ "$line" != "" ]; then
    sed -i -e "s%${line}%%g" $filepath
    sed -i "/^\s*$/d" $filepath
  fi
}

config::list() {
  less $ZMICRO_RC
}

config::check_or_set() {
  load inquirer

  local key=$1
  local type=$2
  local filepath=$3
  local message=$4
  local default_value=$5

  if [ -z "$key" ]; then
    log::error "[config::check_or_set] key is required"
    exit 1
  fi

  if [ -z "$type" ]; then
    log::error "[config::check_or_set] type is required, options: text, yesno"
    exit 1
  fi

  if [ -z "$filepath" ]; then
    log::error "[config::check_or_set] filepath is required"
    exit 1
  fi

  if [ ! -f "$filepath" ]; then
    log::error "[config::check_or_set] config file ($filepath) not found"
    exit 1
  fi

  # local value=$(env::get $key)
  local value=$(config::get $key $filepath)

  # apply env
  if [ -z "$value" ]; then
    value=$(env::get $key)
  fi

  if [ -z "$value" ]; then
    if [ "$type" = "text" ]; then
      if [ -z "$message" ]; then
        message="请输入 $key:"
      fi

      # inquirer::text "$message" value
      os::inquirer value "text" "$message" true "$default_value"
    elif [ "$type" = "yesno" ]; then
      if [ -z "$message" ]; then
        message="是否启用 $key?"
      fi

      # local choices=("Yes" "No")
      # inquirer::select "$message" choices value
      # if [ "$value" = "Yes" ]; then
      #   value="true"
      # else
      #   value="false"
      # fi
      os::inquirer value "yesno" "$message" true "$default_value"
    # elif [ "$type" = "select" ]; then
    #   os::inquirer value "select" choices "$message" true
    else
      log::error "[config::check_or_set] invalid type($type), options: text, yesno"
      exit 1
    fi
  fi

  # echo "key: $key, value: $value"
  config::set $key $value $filepath
}

# bug:
#   question:
#     Shell script read missing last line
#     shell 无法读取最后一行，因为 shell 没有换行符，所以读取到的是空行
#   stackoverflow: https://stackoverflow.com/questions/12916352/shell-script-read-missing-last-line
#   solution:
#     确保换行
config::export() {
  local filepath=$1
  if [ -z "$filepath" ]; then
    log::error "[config::export] filepath is required"
    exit 1
  fi

  if [ ! -f "$filepath" ]; then
    log::error "[config::export] config file ($filepath) not found"
    exit 1
  fi

  while read line; do
    # echo "line: $line - $filepath"
    # @1 empty line
    if [ -z "$line" ]; then
      continue
    fi

    # @2 # start @TODO bug not fix, cause by others
    if [ "$(string::starts_with '$line' '#')" = "0" ]; then
      continue
    fi

    local real_line=$(echo $line | awk -F '#' '{print $1}')
    local key=$(echo $real_line | awk -F '=' '{print $1}')
    local value=$(echo $real_line | awk -F '=' '{print $2}')

    # echo "real_line: $real_line - $key"
    if [ -z "$key" ]; then
      continue
    fi

    # @TODO remove quote
    # value=${value#\"}
    # value=${value%\"}
    # value=${value#\'}
    # value=${value%\'}
    # trim quote
    value=$(echo $value | sed -e 's/^"//' -e 's/"$//' | sed -e "s/^'//" -e "s/'$//")

    export "$key"="$value"
  done <$filepath
}

config::ensure_global_rc() {
  if [ ! -d "$ZMICRO_GLOBAL_RC_DIR" ]; then
    sudo mkdir -p $ZMICRO_GLOBAL_RC_DIR
  fi
  if [ ! -w "$ZMICRO_GLOBAL_RC_DIR" ]; then
    sudo chown -R $USER $ZMICRO_GLOBAL_RC_DIR
  fi

  if [ ! -f "$ZMICRO_GLOBAL_RC" ]; then
    sudo touch $ZMICRO_GLOBAL_RC
  fi
  if [ ! -w "$ZMICRO_GLOBAL_RC" ]; then
    sudo chown $USER $ZMICRO_GLOBAL_RC
  fi
}

config::global:set() {
  local filepath=$ZMICRO_GLOBAL_RC
  local key=$1
  local value=$2

  if [ -z "$key" ]; then
    log::error "[config::global:set] key is required"
    exit 1
  fi

  if [ -z "$value" ]; then
    log::error "[config::global:set] value is required"
    exit 1
  fi

  if [ ! -f "$filepath" ]; then
    sudo mkdir -p $ZMICRO_GLOBAL_RC_DIR
    sudo touch $ZMICRO_GLOBAL_RC
  fi

  if [ ! -w "$filepath" ]; then
    sudo chown $USER $filepath
  fi

  config::set $key $value $filepath
}

config::global:get() {
  local key=$1
  local filepath=$ZMICRO_GLOBAL_RC

  if [ -z "$key" ]; then
    log::error "[config::global:get] key is required"
    exit 1
  fi

  if [ ! -f "$filepath" ]; then
    sudo mkdir -p $ZMICRO_GLOBAL_RC_DIR
    sudo touch $ZMICRO_GLOBAL_RC
    if [ ! -w "$ZMICRO_GLOBAL_RC" ]; then
      sudo chown $USER $ZMICRO_GLOBAL_RC
    fi
  fi

  config::get $key $filepath
}

config::global:remove() {
  local key=$1
  local filepath=$ZMICRO_GLOBAL_RC

  if [ -z "$key" ]; then
    log::error "[config::global:remove] key is required"
    exit 1
  fi

  if [ ! -f "$filepath" ]; then
    sudo mkdir -p $ZMICRO_GLOBAL_RC_DIR
    sudo touch $ZMICRO_GLOBAL_RC
  fi

  if [ ! -w "$filepath" ]; then
    sudo chown $USER $filepath
  fi

  config::remove $key $filepath
}

config::global:list() {
  if [ ! -f "$ZMICRO_GLOBAL_RC" ]; then
    sudo mkdir -p $ZMICRO_GLOBAL_RC_DIR
    sudo touch $ZMICRO_GLOBAL_RC
  fi

  if [ ! -w "$ZMICRO_GLOBAL_RC" ]; then
    sudo chown $USER $ZMICRO_GLOBAL_RC
  fi

  less $ZMICRO_GLOBAL_RC
}

# features
config::docker() {
  local DOCKER_SOCKET=/var/run/docker.sock
  groups | grep docker >>/dev/null 2>&1
  if [ "$?" != "0" ] && [ -e "$DOCKER_SOCKET" ]; then
    local group_id=$(ls -n $DOCKER_SOCKET | awk '{print $4}')
    if [ "$group_id" = "0" ]; then
      sudo usermod -aG root $USER
      return
    fi

    sudo groupadd -g $group_id docker >>/dev/null 2>&1
    sudo usermod -aG docker $USER >>/dev/null 2>&1

    log::info "successfuly config docker for $USER."
  fi
}

config::inquirer() {
  if [ -z "$CONFIG_FILEPATH" ]; then
    log::error "[config::inquirer] CONFIG_FILEPATH is required"
    exit 1
  fi

  local key=$1
  if [ "$CONFIG_IGNORE_IF_EXISTS" = "true" ] && [ -n "$(env::get $key)" ]; then
    return
  fi

  os::inquirer "$@"

  local value=$(env::get $key)
  local filepath=$CONFIG_FILEPATH
  config::set $key $value $filepath
}

config::set_filepath() {
  local path=$1
  if [ -z "$path" ]; then
    log::error "[config::set_filepath] path is required"
    exit 1
  fi

  # @TODO global env maybe harmful
  # should do with config::unset_filepath
  export CONFIG_FILEPATH=$path
}

config::set_ignore_if_exists() {
  # @TODO global env maybe harmful
  # should do with config::unset_ignore_if_exists
  export CONFIG_IGNORE_IF_EXISTS=true
}

config::unset_filepath() {
  export CONFIG_FILEPATH=
}

config::unset_ignore_if_exists() {
  export CONFIG_IGNORE_IF_EXISTS=
}

export -f config::load_file
export -f config::load_dir

export -f load_config

export -f config::load_mod
export -f config::load_core_mod
export -f config::load_user_config

export -f config::list
export -f config::get
export -f config::set
export -f config::remove

export -f config::check_or_set
export -f config::export

export -f config::ensure_global_rc
export -f config::global:set
export -f config::global:get
export -f config::global:remove
export -f config::global:list

export -f config::docker

export -f config::inquirer

export -f config::set_filepath
export -f config::set_ignore_if_exists

export -f config::unset_filepath
export -f config::unset_ignore_if_exists
