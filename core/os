#!/bin/bash

os::homedir() {
  echo $HOME
}

os::username() {
  if [ "$GIT_USER" != "" ]; then
    echo $GIT_USER
    return
  fi

  if [ "$USER" != "" ]; then
    echo $USER
    return
  fi

  local user=$(id -u -n)
  if [ "$user" != "" ]; then
    echo $user
    return
  fi

  log::error "Cannot get user by os::username"
  exit 1
}

os::shell() {
  echo $SHELL
}

os::bash_profile() {
  echo "$HOME/.bashrc"
}

os::zsh_profile() {
  echo "$HOME/.zshrc"
}

os::shell_profile() {
  if [ "$(os::is_zsh)" = "true" ]; then
    os::zsh_profile
  elif [ "$(os::is_bash)" = "true" ]; then
    os::bash_profile
  else
    echo "$HOME/.profile"
  fi
}

os::hostname() {
  # echo $HOST
  hostname
}

os::uptime() {
  if [ "$(os::is_macos)" = "true" ]; then
    uptime
  else
    echo $(uptime -p)
  fi
}

os::arch() {
  local arch=$(uname -m)
  if [ "$arch" = "x86_64" ] || [ "$arch" = "amd64" ]; then
    arch="amd64"
  elif [ "$arch" = "aarch64" ] || [ "$arch" = "arm64" ]; then
    arch="arm64"
  fi

  echo $arch
}

os::platform() {
  if [ "$(os::is_macos)" = "true" ]; then
    echo "darwin"
    return
  fi

  echo "linux"
}

os::release() {
  local issue=""

  # Red Hat
  # cat /proc/version | grep "Red Hat" >> /dev/null 2&>1
  # if [ "$?" != "0" ]; then
  #   echo $(cat /proc/version | grep -o "Red Hat [^-]*")
  #   return
  # fi

  which lsb_release >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    issue=$(lsb_release -d)
  else
    issue=$(cat /etc/issue)
  fi

  local array=$issue
  local res=""

  for element in $array; do
    # echo "element: $element"
    if [ "$element" = "\n" ]; then
      continue
    fi

    if [ "$element" = "\l" ]; then
      continue
    fi

    if [ "$element" = "Description:" ]; then
      continue
    fi

    # core
    if [ "$res" = "" ]; then
      res=$element
    else
      res="$res $element"
    fi
  done

  echo $res
}

os::kernel() {
  echo $(uname -s)
}

os::pwd() {
  echo $PWD
}

os::tmp() {
  echo /tmp
}

os::tmp_dir() {
  mktemp -u
}

os::tmp_file() {
  mktemp
}

#
os::is_bash() {
  echo $(os::shell) | grep -o bash >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "false"
    return
  fi

  echo "true"
}

os::is_zsh() {
  echo $(os::shell) | grep -o zsh >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "false"
    return
  fi

  echo "true"
}

os::is_macos() {
  local kernel=$(os::kernel)

  if [ "$kernel" = "Darwin" ]; then
    echo true
  else
    echo false
  fi
}

os::is_linux() {
  local kernel=$(os::kernel)

  if [ "$kernel" = "Linux" ]; then
    echo true
  else
    echo false
  fi
}

os::is_centos() {
  which yum >>/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo true
  else
    echo false
  fi
}

os::is_ubuntu() {
  which apt >>/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo true
  else
    echo false
  fi
}

os::is_alpine() {
  which apk >>/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo true
  else
    echo false
  fi
}

os::is_archlinux() {
  which pacman >>/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo true
  else
    echo false
  fi
}

os::is_federa() {
  which dnf >>/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo true
  else
    echo false
  fi
}

os::is_docker() {
  if [ -f "/.dockerenv" ]; then
    echo "true"
    return
  fi

  cat /proc/self/cgroup | grep docker >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    echo "true"
    return
  fi

  echo "false"
}

os::top() {
  htop -t
}

os::is_command_exist() {
  local cmd=$1
  if command -v $cmd >>/dev/null 2>&1; then
    echo "true"
  else
    echo "false"
  fi
}

os::is_support_color() {
  # if [ "$(echo $PS1)" != "" ]; then
  if [ "$TERM" = "xterm-256color" ]; then
    echo "true"
  else
    echo "false"
  fi
}

os::is_ip() {
  local ip=$1

  if [ -z "$ip" ]; then
    log::error "ip is required"
    return
  fi

  # regexp syntax: [[ a =~ b ]]
  # if [[ "1.2.3.4" =~ "^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$" ]]; then
  #   echo "true"
  # else
  #   echo "false"
  # fi

  # is ip
  echo $ip | grep -E "^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$" >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    echo "true"
  else
    echo "false"
  fi
}

os::device_config() {
  local cpus=$(cat /proc/cpuinfo | grep processor | wc -l)
  local memory=$(((($(cat /proc/meminfo | grep MemTotal | awk '{print $2}') / 1024 / 1024)) + 1))
  local disk=$(os::disk_usage total)

  echo "${cpus}C${memory}G - ${disk}G"
}

os::cpu_usage() {
  top -bn1 | grep Cpu | head -n 1 | awk '{printf "%.2f", $2}'
}

os::memory_usage() {
  # unit: MB
  # used total percent

  local type=$1
  local all=$(free -m | awk 'NR==2{printf "%s/%sMB (%.2f%%)", $3,$2,$3*100/$2 }')

  case $type in
  used)
    echo $all | awk -F '/' '{print $1}'
    ;;
  total)
    echo $all | awk -F '[/M]' '{print $2}'
    ;;
  percent)
    echo $all | awk -F '[(%]' '{print $2}'
    ;;
  *)
    echo $all
    ;;
  esac
}

os::disk_usage() {
  # unit: GB
  # used total percent

  local type=$1
  # @TODO var will broken \n
  # local devices=$(df -h | grep "^/dev/")

  function get_used() {
    local value=0
    local lines=$(df -h | grep "^/dev/" | awk '{print $3}' | grep "G" | awk -F 'G' '{print $1}')
    for line in ${lines[@]}; do
      value=$(($value + $line))
    done

    echo $value
  }

  function get_total() {
    local value=0
    local lines=$(df -h | grep "^/dev/" | awk '{print $2}' | grep "G" | awk -F 'G' '{print $1}')
    for line in ${lines[@]}; do
      value=$(($value + $line))
    done

    echo $value
  }

  case $type in
  used)
    get_used
    ;;
  total)
    get_total
    ;;
  percent)
    local used=$(get_used)
    local total=$(get_total)
    echo $(expr $used \* 100 / $total)
    ;;
  *)
    echo $lines | awk '{printf "%s - %d %d GB (%s)\n", $1, $3,$2,$5}'
    ;;
  esac
}

os::system_usage() {
  echo "cpu: $(os::cpu_usage)
memory: $(os::memory_usage)
disk: $(os::disk_usage)"
}

os::network_ip() {
  # dig +short myip.opendns.com @resolver1.opendns.com
  local ip=$(curl https://ip.zcorky.com 2>/dev/null)
  echo $ip
}

os::network_ip_internal() {
  # reference: https://apple.stackexchange.com/questions/20547/how-do-i-find-my-ip-address-from-the-command-line
  if [ "$(os::is_macos)" = "true" ]; then
    ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}'
    return
  fi

  echo $(hostname -I)
}

os::machine_id() {
  if [ "$(os::is_linux)" = "true" ]; then
    local machine_id0=/var/lib/dbus/machine-id
    local machine_id1=/etc/machine-id
    if [ -f $machine_id0 ]; then
      cat $machine_id0
    elif [ -f $machine_id1 ]; then
      cat $machine_id1
    else
      log::error "Cannot get machine id in linux"
      exit 1
    fi
  elif [ "$(os::is_macos)" = "true" ]; then
    echo $(ioreg -rd1 -c IOPlatformExpertDevice | grep "IOPlatformUUID" | awk -F '"' '{print $4}')
  else
    log::error "Cannot get machine id by unknown system"
    exit 1
  fi
}

os::rw_permission() {
  local path=$1
  # if [ -f $path ]; then
  #   if  [ ! -r $path ] || [ ! -w $path ]; then
  #     sudo chmod o+rw $path
  #   fi
  # fi

  # if [ -d $path ]; then
  #   if [ ! -w $path ]; then
  #     sudo chown -R $(os::username) $path
  #   fi
  # fi

  # path not exist
  if [ ! -e $path ]; then
    return
  fi

  if [ ! -r $path ] || [ ! -w $path ]; then
    sudo chmod a+rw $path

    log::debug "add rw permission: $path"
  fi
}

os::ensure_permission() {
  os::rw_permission $@
}

# @TODO
os::ensure_logs_permission() {
  os::ensure_permission $ZMICRO_LOG_PATH

  os::ensure_permission $ZMICRO_LOG_COMMON_PATH
  os::ensure_permission $ZMICRO_LOG_DEBUG_PATH
  os::ensure_permission $ZMICRO_LOG_ERROR_PATH
  os::ensure_permission $ZMICRO_LOG_UPDATE_PATH
  os::ensure_permission $ZMICRO_LOG_VERSION_PATH
  os::ensure_permission $ZMICRO_LOG_NOTIFY_PATH
}

os::is_pid_valid() {
  local pid=$1
  local pid_file=/proc/$pid/status
  if [ -f $pid_file ]; then
    echo "true"
  else
    echo "false"
  fi
}

os::get_pid_memory() {
  local pid=$1
  local pid_file=/proc/$pid/status
  if [ ! -f $pid_file ]; then
    echo "0"
    return
  fi

  local memory=$(cat $pid_file | grep VmRSS | awk '{print $2}')
  if [ -z "$memory" ]; then
    echo "0"
    return
  fi

  echo $memory
}

os::kill_pid() {
  local pid=$1
  if [ "$(os::is_pid_valid $pid)" = "true" ]; then
    # log "kill pid: $pid"
    # -9 may cause child processes not killed
    # kill -9 $pid
    kill $pid
  fi
}

os::random_string() {
  local length=$1
  if [ -z "$length" ]; then
    length=32
  fi

  if [ "$(os::is_command_exist openssl)" = "false" ]; then
    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $length | head -n 1
    return
  fi

  openssl rand -hex $length
}

os::random_int() {
  local max=$1
  local min=$2
  if [ -z "$max" ]; then
    log::error "[os::random_int] max is required"
    return
  fi

  if [ -z "$min" ]; then
    min=0
  fi

  echo $(((RANDOM % $max) + $min))
}

os::random_id() {
  os::random_string 32
}

# it is useful for hold on situations
#   such as dockerfile CMD
os::sleep_infinity() {
  sleep infinity
}

os::hold_on() {
  os::sleep_infinity
}

os::timestamp() {
  timestamp
}

os::usage() {
  if [ "$(os::is_macos)" = "true" ]; then
    echo "-"
    return
  fi

  echo "cpu: $(os::memory_usage percent)%, memory: $(os::memory_usage percent)%, disk: $(os::disk_usage percent)%"
}

os::info() {
  local ip=$(os::network_ip)
  local user=$(os::username)
  local homedir=$(os::homedir)
  local shell=$(os::shell)
  local id=$(os::machine_id)
  local uptime=$(uptime)
  local hostname=$(os::hostname)
  local kernel=$(os::kernel)
  local release="-"
  local distribution="-"
  local architecture=$(os::arch)
  local is_docker=false
  local device_config="-"
  local load="-"
  local timestamp=$(os::timestamp)

  if [ "$(os::is_macos)" != "true" ]; then
    # release=$(os::release)
    distribution=$(os::distribution)
    is_docker=$(os::is_docker)
    device_config=$(os::device_config)
    load="$(os::usage)"
  fi

  local info="\
## Network\n\
* public: $ip\n\
* internal: $(os::network_ip_internal)\n\
\n\
## User\n\
* all: $(users::all | tr '\n' ',')\n\
* online: \n\
$(users::online | tr '\n' ',')\n\
* histories: \n\
$(users::login::histories | head -5 | tr '\n' ',')\n\
* doing: \n\
$(users::doing)\n\
\n\
## WorkSpace\n\
* is_workspace: $(os::is_workspace)\n\
\n\
## System\n\
* shell: $shell\n\
* hostname: $hostname\n\
* kernel: $kernel\n\
* distribution: $distribution\n\
* arch: $architecture\n\
* is_docker: $is_docker\n\
\n\
## Device\n\
* id: $id\n\
* device_config: $device_config\n\
\n\
## Load\n\
* load: $load\n\
* uptime: $uptime\n\
\n\
* timestamp: $timestamp"

  echo $info
}

os::ps() {
  if [ "$(os::is_macos)" = "true" ]; then
    ps -A
  elif [ "$(os::is_centos)" = "true" ]; then
    pe -ef
  elif [ "$(os::is_ubuntu)" = "true" ]; then
    ps -aux
  else
    ps -aux
  fi
}

os::top() {
  if [ "$(os::is_macos)" = "true" ]; then
    top -l 1
  else
    top -n 1
  fi
}

# @EXAMPLE
#  local key=$ZMICRO_HOME
#  os::get_env $key
os::get_env() {
  env::get $1
}

os::inquirer() {
  load inquirer
  local key=$1
  # 1. text       <args: key "text" question required default>
  # 2. yesno      <args: key "yesno" question required default>
  # 3. select     <args: key "select" choices question required>
  # 4. confirm (alias of yesno)
  # 5. radio   (alias of select)
  local type=$2
  #
  local question=$3
  local required=$4
  local default_value=$5
  
  # @TODO
  local choices=()

  if [ -z "$key" ]; then
    log::error "[os::inquirer] key is required"
    return
  fi

  if [ -z "$type" ]; then
    log::error "[os::inquirer] type is required, available: text, yesno"
    return
  fi

  # correct args
  if [ "$type" = "text" ]; then
    # os::inquirer value "text" "请输入 ？" "默认值"
    if [ "$required" != "true" ] && [ "$required" != "false" ]; then
      default_value=$required
      required="true"
    fi
  elif [ "$type" = "select" ] || [ "$type" = "radio" ]; then
    choices="$3"
    question=$4
    required=$5
    # default_value=$6
  fi

  if [ -z "$question" ]; then
    if [ "$type" = "text" ]; then
      question="请输入 $key:"
    elif [ "$type" = "yesno" ] || [ "$type" = "confirm" ]; then
      question="是否启用 $key?"
    elif [ "$type" = "select" ] || [ "$type" = "radio" ]; then
      question="请选择 $key:"
    fi
  fi

  if [ -z "$required" ]; then
    required=true
  fi

  if [ "$type" = "text" ]; then
    inquirer::text "$question" value "$default_value" "value is required" inquirer::required
  elif [ "$type" = "yesno" ] || [ "$type" = "confirm" ]; then
    local choices=("Yes" "No")
    inquirer::select "$question" choices value
    if [ "$value" = "Yes" ]; then
      value="true"
    else
      value="false"
    fi
  elif [ "$type" = "select" ] || [ "$type" = "radio" ]; then
    # @TODO study from inquirer => select => _list_input
    eval _choices=( '"${'${choices}'[@]}"' )
    local _choices_length=${#_choices[@]}
    local _choices_index=0
    choices=()
    while [ "$_choices_index" -lt "$_choices_length" ]; do
      choices+=("${_choices[$_choices_index]}")
      _choices_index=$((_choices_index + 1))
    done  

    inquirer::select "$question" choices value
  else
    log::error "[os::inquirer] invalid type($type), options: text, yesno"
    exit 1
  fi

  if [ "$required" = "true" ]; then
    if [ -z "$value" ]; then
      log::error "[os::inquirer] value is required"
      os::inquirer "$@"
      return
    fi
  fi

  # @TODO
  export $key=$value
}

os::add_user_to_docker_group() {
  local user=$1
  if [ -z "$user" ]; then
    user=$USER
  fi

  sudo usermod -aG docker $user
}

os::has_command() {
  os::is_command_exist $1
}

os::is_workspace() {
  if [ -d "/home/workspace" ]; then
    echo "true"
  else
    echo "false"
  fi
}

os::fix_permissions() {
  # log: fix all user
  log::fix_permissions

  # fix git permissions
  git::fix_permissions

  # home: fix current user
  sudo chown -R $USER $ZMICRO_HOME

  # /data
  # @TODO data 不能随便变更权限，会导致容器权限问题
  #   比如会导致 postgres 因为权限问题挂掉
  # if [ ! -w "$ZMICRO_APP_CONFIGS_PATH" ]; then
  #   # @TODO
  #   sudo chown -R $USER $ZMICRO_APP_CONFIGS_PATH
  # fi

  # /configs
  # if [ ! -w "$ZMICRO_APP_DATA_PATH" ]; then
  #   # @TODO
  #   sudo chown -R $USER $ZMICRO_APP_DATA_PATH
  # fi
}

os::distribution() {
  local name="unknown"
  if [ "$(os::is_linux)" = "true" ]; then
    if [ -f /etc/redhat-release ]; then
      name='RedHat'
    elif [ -f /etc/SuSE-release ]; then
      name=$(cat /etc/SuSE-release | tr "\n" ' ' | sed s/VERSION.*//)
    elif [ -f /etc/mandrake-release ]; then
      name='Mandrake'
    elif [ -f /etc/os-release ]; then
      name=$(awk -F "PRETTY_NAME=" '{print $2}' /etc/os-release | tr -d '\n"')
    elif [ -f /etc/debian_version ]; then
      name="Debian $(cat /etc/debian_version)"
    fi

    if [ -f /etc/UnitedLinux-release ]; then
      name="${name}[$(cat /etc/UnitedLinux-release | tr "\n" ' ' | sed s/VERSION.*//)]"
    fi
  elif [ "$(os::is_macos)" = "true" ]; then
    name="MacOS $(sw_vers -productVersion)"
  fi

  echo $name
}

os::assert() {
  local ok=$1
  local message=$2

  if [ "$ok" != "" ] && [ "$message" = "" ]; then
    # echo "assert error, need two parameters: ok and message"
    # exit 1
    message=$ok
    ok=""
  fi

  if [ "$ok" = "" ] || [ "$ok" = "false" ]; then
    echo "assert: $message"
    exit 1
  fi
}

os::is_nodejs_installed() {
  # ZMICRO_NVM
  export NODE_HOME=/usr/local/node
  export NODE_USER_HOME=$HOME/.node
  export PATH=$NODE_HOME/bin:$NODE_USER_HOME/bin:$PATH

  which node >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    echo "true"
  else
    echo "false"
  fi
}

os::is_go_installed() {
  # ZMICRO_GVM
  export GOHOME=/usr/local/go
  export GOPATH=$HOME/.go
  export PATH=$GOHOME/bin:$GOPATH/bin:$PATH

  which go >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    echo "true"
  else
    echo "false"
  fi
}

os::is_deno_installed() {
  # ZMICRO_DVM
  export DENO_HOME=/usr/local/deno
  export DENO_USER_HOME=$HOME/.deno
  export PATH=$DENO_HOME/bin:$DENO_USER_HOME/bin:$PATH

  which deno >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    echo "true"
  else
    echo "false"
  fi
}

os::is_rust_installed() {
  # ZMICRO_RSVM
  export RUST_HOME=/usr/local/rust
  export RUST_USER_HOME=$HOME/.rust
  export PATH=$RUST_HOME/rustc/bin:$RUST_HOME/cargo/bin:$RUST_USER_HOME/bin:$PATH

  which rustc >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    echo "true"
  else
    echo "false"
  fi
}

os::support_method() {
  local method=$1
  # echo "method: $method"
  command -v $method >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    echo "true"
  else
    echo "false"
  fi
}

os::healthcheck() {
  local url=$1
   if [ -z "$url" ]; then
    log::error "[os::healthcheck] url is required"
    return
  fi

  net::is_url_visitable $url
}

# @TODO this is an example used in service/restart
# which is a good example for seperating options before service name
# 可以把选项提前，一直没有找到好方法，这里只是一个例子
#
os::get_options() {
  local args_length=${#@}
  local args_index=0
  while [ "$1" != "" ]; do
    args_index=$((args_index + 1))
    case $1 in
      -h | --help)
        help
        exit 0
        ;;
      -p | --pull)
        pull=true
        ;;
      -u | --upgrade)
        pull=true
        ;;
      *)
        if [ "$args_index" != "$args_length" ]; then
          log::error "Unknown option: $1"
          exit 1
        else
          service_name=$1
        fi
        ;;
    esac
    shift
  done
}

export -f os::arch
export -f os::platform
export -f os::release
export -f os::kernel
export -f os::distribution
export -f os::shell

export -f os::homedir
export -f os::username
export -f os::shell_profile
export -f os::zsh_profile
export -f os::bash_profile
export -f os::hostname
export -f os::uptime

export -f os::ps
export -f os::top

export -f os::pwd
export -f os::tmp
export -f os::tmp_dir
export -f os::tmp_file

export -f os::is_bash
export -f os::is_zsh
export -f os::is_linux
export -f os::is_macos

export -f os::is_centos
export -f os::is_ubuntu
export -f os::is_alpine
export -f os::is_archlinux
export -f os::is_federa

export -f os::is_docker

export -f os::top
export -f os::is_command_exist
export -f os::is_support_color

export -f os::has_command

export -f os::device_config

export -f os::cpu_usage
export -f os::memory_usage
export -f os::disk_usage
export -f os::system_usage

export -f os::network_ip
export -f os::network_ip_internal

export -f os::machine_id

export -f os::rw_permission
export -f os::ensure_permission
export -f os::ensure_logs_permission

export -f os::is_pid_valid
export -f os::get_pid_memory
export -f os::kill_pid

export -f os::random_string
export -f os::random_int

export -f os::random_id

export -f os::sleep_infinity
export -f os::hold_on

export -f os::timestamp

export -f os::usage
export -f os::info

export -f os::get_env

export -f os::inquirer

export -f os::add_user_to_docker_group

export -f os::is_workspace

export -f os::fix_permissions

export -f os::assert

export -f os::is_nodejs_installed
export -f os::is_go_installed
export -f os::is_deno_installed
export -f os::is_rust_installed

export -f os::is_ip

export -f os::support_method

export -f os::healthcheck

export -f os::get_options
