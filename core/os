#!/bin/bash

os_homedir() {
  echo $HOME
}

os_username() {
  if [ "$USER" != "" ]; then
    echo $USER
    return
  fi

  local user=$(id -u -n)
  if [ "$user" != "" ]; then
    echo $user
    return
  fi

  log_error "Cannot get user by os_username"
  exit 1
}

os_shell() {
  echo $SHELL
}

os_bash_profile() {
  echo "$HOME/.bashrc"
}

os_zsh_profile() {
  echo "$HOME/.zshrc"
}

os_shell_profile() {
  if [ "$(os_is_zsh)" = "true" ]; then
    os_zsh_profile
  elif [ "$(os_is_bash)" = "true" ]; then
    os_bash_profile
  else
    echo "$HOME/.profile"
  fi
}

os_hostname() {
  echo $HOST
}

os_uptime() {
  echo $(uptime -p)
}

os_arch() {
  echo $(uname -m)
}

os_release() {
  local issue=""

  # Red Hat
  # cat /proc/version | grep "Red Hat" >> /dev/null 2&>1
  # if [ "$?" != "0" ]; then
  #   echo $(cat /proc/version | grep -o "Red Hat [^-]*")
  #   return
  # fi

  which lsb_release >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    issue=$(lsb_release -d)
  else
    issue=$(cat /etc/issue)
  fi

  local array=$issue
  local res=""

  for element in $array; do
    # echo "element: $element"
    if [ "$element" = "\n" ]; then
      continue
    fi

    if [ "$element" = "\l" ]; then
      continue
    fi

    if [ "$element" = "Description:" ]; then
      continue
    fi

    # core
    if [ "$res" = "" ]; then
      res=$element
    else
      res="$res $element"
    fi
  done

  echo $res
}

os_kernel() {
  echo $(uname -s)
}

os_pwd() {
  echo $PWD
}

os_tmp() {
  echo /tmp
}

#
os_is_bash() {
  set +e
  echo $(os_shell) | grep -o bash >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "false"
    return
  fi

  echo "true"
  set -e
}

os_is_zsh() {
  set +e
  echo $(os_shell) | grep -o zsh >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "false"
    return
  fi

  echo "true"
  set -e
}

os_is_macos() {
  local kernel=$(os_kernel)

  if [ "$kernel" = "Darwin" ]; then
    echo true
  else
    echo false
  fi
}

os_is_linux() {
  local kernel=$(os_kernel)

  if [ "$kernel" = "Linux" ]; then
    echo true
  else
    echo false
  fi
}

os_is_centos() {
  which yum >>/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo true
  else
    echo false
  fi
}

os_is_ubuntu() {
  which apt >>/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo true
  else
    echo false
  fi
}

os_is_alpine() {
  which apk >>/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo true
  else
    echo false
  fi
}

os_is_archlinux() {
  which pacman >>/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo true
  else
    echo false
  fi
}

os_is_federa() {
  which dnf >>/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo true
  else
    echo false
  fi
}

os_is_docker() {
  if [ -f "/.dockerenv" ]; then
    echo "true"
    return
  fi

  cat /proc/self/cgroup | grep docker >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    echo "true"
    return
  fi

  echo "false"
}

os_top() {
  htop -t
}

os_is_command_exist() {
  local command=$1
  command -v $command >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    echo "true"
  else
    echo "false"
  fi
}

os_is_support_color() {
  # if [ "$(echo $PS1)" != "" ]; then
  if [ "$TERM" = "xterm-256color" ]; then
    echo "true"
  else
    echo "false"
  fi
}

os_cpu_usage() {
  top -bn1 | grep Cpu | head -n 1 | awk '{printf "%.2f", $2}'
}

os_memory_usage() {
  # unit: MB
  # used total percent

  local type=$1
  local all=$(free -m | awk 'NR==2{printf "%s/%sMB (%.2f%%)", $3,$2,$3*100/$2 }')

  case $type in
  used)
    echo $all | awk -F '/' '{print $1}'
    ;;
  total)
    echo $all | awk -F '[/M]' '{print $2}'
    ;;
  percent)
    echo $all | awk -F '[(%]' '{print $2}'
    ;;
  *)
    echo $all
    ;;
  esac
}

os_disk_usage() {
  # unit: GB
  # used total percent

  local type=$1
  local all=$(df -h | awk '$NF=="/"{printf "%d/%dGB (%s)", $3,$2,$5}')

  case $type in
  used)
    echo $all | awk -F '/' '{print $1}'
    ;;
  total)
    echo $all | awk -F '[/G]' '{print $2}'
    ;;
  percent)
    echo $all | awk -F '[(%]' '{print $2}'
    ;;
  *)
    echo $all
    ;;
  esac
}

os_system_usage() {
  echo "cpu: $(os_cpu_usage)
memory: $(os_memory_usage)
disk: $(os_disk_usage)"
}

os_network_ip() {
  dig +short myip.opendns.com @resolver1.opendns.com
}

os_machine_id() {
  if [ "$(os_is_linux)" = "true" ]; then
    local machine_id0=/var/lib/dbus/machine-id
    local machine_id1=/etc/machine-id
    if [ -f $machine_id0 ]; then
      cat $machine_id0
    elif [ -f $machine_id1 ]; then
      cat $machine_id1
    else
      log_error "Cannot get machine id in linux"
      exit 1
    fi
  elif [ "$(os_is_macos)" = "true" ]; then
    echo $(ioreg -rd1 -c IOPlatformExpertDevice | grep "IOPlatformUUID" | awk -F '"' '{print $4}')
  else
    log_error "Cannot get machine id by unknown system"
    exit 1
  fi
}

os_rw_permission() {
  local path=$1
  if [ -f $path ]; then
    if  [ ! -r $path ] || [ ! -w $path ]; then
      sudo chmod o+rw $path
    fi
  fi

  if [ -d $path ]; then
    if [ ! -w $path ]; then
      sudo chown -R $(os_username) $path
    fi
  fi
}

os_ensure_permission() {
  os_rw_permission $@
}

# @TODO
os_ensure_logs_permission() {
  os_ensure_permission $ZMICRO_LOG_PATH

  os_ensure_permission $ZMICRO_LOG_COMMON_PATH
  os_ensure_permission $ZMICRO_LOG_DEBUG_PATH
  os_ensure_permission $ZMICRO_LOG_ERROR_PATH
  os_ensure_permission $ZMICRO_LOG_UPDATE_PATH
  os_ensure_permission $ZMICRO_LOG_VERSION_PATH
  os_ensure_permission $ZMICRO_LOG_NOTIFY_PATH
}

os_is_pid_valid() {
  local pid=$1
  local pid_file=/proc/$pid/status
  if [ -f $pid_file ]; then
    echo "true"
  else
    echo "false"
  fi
}

os_get_pid_memory() {
  local pid=$1
  local pid_file=/proc/$pid/status
  if [ ! -f $pid_file ]; then
    echo "0"
    return
  fi

  local memory=$(cat $pid_file | grep VmRSS | awk '{print $2}')
  if [ -z "$memory" ]; then
    echo "0"
    return
  fi

  echo $memory
}

os_kill_pid() {
  local pid=$1
  if [ "$(os_is_pid_valid $pid)" = "true" ]; then
    # log "kill pid: $pid"
    kill -9 $pid
  fi
}

export -f os_homedir
export -f os_username
export -f os_shell
export -f os_shell_profile
export -f os_hostname
export -f os_uptime
export -f os_kernel

export -f os_pwd
export -f os_tmp

export -f os_is_bash
export -f os_is_zsh
export -f os_is_linux
export -f os_is_macos

export -f os_is_centos
export -f os_is_ubuntu
export -f os_is_alpine
export -f os_is_archlinux
export -f os_is_federa

export -f os_is_docker

export -f os_top
export -f os_is_command_exist
export -f os_is_support_color

export -f os_cpu_usage
export -f os_memory_usage
export -f os_disk_usage
export -f os_system_usage

export -f os_network_ip

export -f os_machine_id

export -f os_rw_permission
export -f os_ensure_permission
export -f os_ensure_logs_permission

export -f os_is_pid_valid
export -f os_get_pid_memory
export -f os_kill_pid
