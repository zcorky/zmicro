#!/bin/bash

plugin_register() {
  local plugin_name=$1
  if [ "$plugin_name" = "" ]; then
    log_error "[$(timestamp)][plugin] register: plugin name is required"
    exit 1
  fi

  local plugin_path=$(plugin_path $plugin_name)
  local plugin_bin_path=$(plugin_bin_path $plugin_name)

  # Fix permission
  if [ ! -w "$ZMICRO_HOME/bin" ]; then
    sudo chown -R $(os_username) $ZMICRO_HOME/bin
  fi

  if [ ! -d $plugin_bin_path ]; then
    # exit 0
    return
  fi

  log_debug "[$(timestamp)][plugin] bins_path: $plugin_bin_path"
  local bins=$(plugin_list_bins $plugin_name)
  for bin in $bins; do
    local bin_path=$ZMICRO_HOME/bin/$bin

    if [ -f "$bin_path" ] || [ -x "$bin_path" ]; then
      log_debug "[$(timestamp)][plugin] $(color_red "remove") old bin: $bin"
      rm $bin_path
    fi

    log_success "[$(timestamp)][plugin] $(color_green "register") $plugin_name bin: $(color_success $bin)"
    ln -s $plugin_bin_path/$bin $bin_path
  done
}

plugin_unregister() {
  local plugin_name=$1
  if [ "$plugin_name" = "" ]; then
    log_error "[$(timestamp)][plugin] register: plugin name is required"
    exit 1
  fi

  local plugin_path=$ZMICRO_PLUGINS_PATH/$plugin_name

  # Fix permission
  if [ ! -w "$ZMICRO_HOME/bin" ]; then
    sudo chown -R $(os_username) $ZMICRO_HOME/bin
  fi

  if [ ! -d $plugin_path/$plugin/bin ]; then
    # exit 0
    return
  fi

  log_debug "[$(timestamp)][plugin] bins_path: $plugin_path/$plugin/bin"
  local bins=$(plugin_list_bins $plugin_name)
  for bin in $bins; do
    local bin_path=$ZMICRO_HOME/bin/$bin

    if [ -f "$bin_path" ] || [ -x "$bin_path" ]; then
      log_success "[$(timestamp)][plugin] $(color_red "unregister") $plugin_name bin: $(color_red $bin)"
      rm $bin_path
    fi
  done
}

plugin_register_all() {
  local plugin_path=$1
  if [ "$plugin_path" = "-" ]; then
    return
  fi

  local plugins=$(ls $plugin_path)

  log_debug "\n\n[$(timestamp)][plugin]"
  for plugin in $plugins; do
    log_debug "[$(timestamp)][plugin] find plugin: $plugin"

    if [ ! -d "$plugin_path/$plugin/bin" ]; then
      continue
    fi

    log_debug "[$(timestamp)][plugin] bins_path: $plugin_path/$plugin/bin"
    local bins=$(ls $plugin_path/$plugin/bin)
    for bin in $bins; do
      local bin_path=$ZMICRO_HOME/bin/$bin
      local plugin_bin_path=$plugin_path/$plugin/bin/$bin

      if [ ! -f "$bin_path" ] && [ ! -x "$bin_path" ]; then
        log_debug "[$(timestamp)][plugin] register $plugin bin: $bin"

        set +e
        ln -s $plugin_bin_path $bin_path
        if [ "$?" != "0" ]; then
          log_warn "[$(timestamp)][plugin] failed to register $plugin bin: $bin"
        fi
        set -e
      fi
    done
  done
}

plugin_path() {
  local plugin_name=$1
  if [ -z $plugin_name ]; then
    log_error "[plugin_path] plugin name is required"
    exit 1
  fi

  echo $ZMICRO_PLUGINS_PATH/$plugin_name
}

plugin_mod_path() {
  local plugin_name=$1
  echo $(plugin_path $plugin_name)/mod
}

plugin_bin_path() {
  local plugin_name=$1
  echo $ZMICRO_PLUGINS_PATH/$plugin_name/bin
}

plugin_exist() {
  if [ -d $(plugin_path $1) ]; then
    echo "true"
  else
    echo "false"
  fi
}

plugin_has() {
  plugin_exist $@
}

plugin_bin_exist() {
  if [ -d $(plugin_bin_path $1) ]; then
    echo "true"
  else
    echo "false"
  fi
}

plugin_list_names() {
  echo $(ls $ZMICRO_PLUGINS_PATH)
}

plugin_list_bins() {
  local plugin_name=$1
  if [ "$(plugin_exist $plugin_name)" != "true" ]; then
    echo ""
  else
    ls $(plugin_bin_path $plugin_name)
  fi
}

plugin_load_mod() {
  local plugin_name=$1
  local plugin_mod_path="$(plugin_path $plugin_name)/mod"

  if [ -f $plugin_mod_path ]; then
    \. $plugin_mod_path
  fi
}

plugin_load_core() {
  local plugin_name=$1
  local plugin_core_path="$(plugin_path $plugin_name)/core"
  # local plugin_core_path="$(plugin_path $plugin_name)/core/load"

  # if [ -f $plugin_core_path ]; then
  #   \. $plugin_core_path
  # fi

  # echo "plugin_core_path: $plugin_core_path"

  local utils=$(ls $plugin_core_path)
  for util in $utils; do
    log_debug "[$(timestamp)][plugin_load_core][${plugin_name}] load: $util"
    . $plugin_core_path/$util
  done
}

plugin_get_version() {
  plugin_load_mod $1

  if [ "$PLUGIN_VERSION" = "" ]; then
    echo "-"
    return
  fi

  echo "$PLUGIN_VERSION"
}

plugin_get_description() {
  plugin_load_mod $1

  if [ "$PLUGIN_DESCRIPTION" = "" ]; then
    echo "No Description"
    return
  fi

  echo "$PLUGIN_DESCRIPTION"
}

plugin_get_dependencies() {
  plugin_load_mod $1

  if [ -z "$DEPENDENCIES" ]; then
    echo "No Dependencies"
    return
  fi

  echo "${DEPENDENCIES[@]}"
}


plugin_each() {
  local fn=$1
  local plugins=$(plugin_list_names)
  array_each $fn $plugins
}

export -f plugin_register_all
export -f plugin_register
export -f plugin_unregister

export -f plugin_list_names
export -f plugin_list_bins
export -f plugin_each

export -f plugin_path
export -f plugin_mod_path
export -f plugin_bin_path
export -f plugin_exist
export -f plugin_bin_exist
export -f plugin_has

export -f plugin_load_mod
export -f plugin_load_core

export -f plugin_get_version
export -f plugin_get_description
export -f plugin_get_dependencies
