#!/bin/bash

# Usage:
#   default mode: echo "$var" | fs::write $file_path
#   append mode: echo "$var" | fs::write -a $file_path
#
# Example:
#   echo "hi" | fs::write /tmp/hi
#   echo "$HOME" | fs::write /tmp/hi
#
#   @NOTICE 当写入多行数据的时候，必须加引号，否则换行将消失
#     text=$(cat <<-END
#     line1
#     line2
#     line3
#     END
#     )
#     GOOD: echo "$text" | fs::write /tmp/hi
#     BAD: echo $text | fs::write /tmp/hi
#
fs::write() {
  local path=$1
  local is_append_mode=false
  local text=$(</dev/stdin)

  # @TODO
  # fs::write -a /tmp/path
  if [ "$path" = "-a" ]; then
    path=$2
    is_append_mode=true
  fi

  if [ "$2" = "true" ]; then
    is_append_mode=true
  fi

  if [ -z "$path" ] || [ -z "$text" ]; then
    log::error "[$(timestamp)][fs::write] path and text is required"
    exit 1
  fi

  # if [ ! -f $path ]; then
  #   log::error "[$(timestamp)][fs::write] path $path not found"
  #   exit 1
  # fi

  # no permission
  # try to use sudo/root
  if [ ! -w $path ]; then
    if [ "$is_append_mode" = "true" ]; then
      sudo tee -a $path >>/dev/null <<EOF
${text}
EOF
    else
      sudo tee $path >>/dev/null <<EOF
${text}
EOF
    fi
    return
  fi

  if [ "$is_append_mode" = "true" ]; then
    echo "$text" >>$path
  else
    echo "$text" >$path
  fi
  #     tee -a $path >> /dev/null <<EOF
  # ${text}
  # EOF
}

fs::read() {
  local path=$1

  if [ -z "$path" ]; then
    log::error "[$(timestamp)][fs::read] path and text is required"
    exit 1
  fi

  if [ ! -f $path ]; then
    log::error "[$(timestamp)][fs::read] path $path not found"
    exit 1
  fi

  if [ ! -r $path ]; then
    log::error "[$(timestamp)][fs::read] path $path permission denied"
    exit 1
  fi

  cat $path
}

fs::append() {
  local path=$1
  local is_append_mode=true
  #
  fs::write $path $is_append_mode
}

fs::prepend() {
  local path=$1
  local text=$(</dev/stdin)

  if [ -z "$path" ] || [ -z "$text" ]; then
    log::error "[$(timestamp)][fs::write] path and text is required"
    exit 1
  fi

  if [ ! -f $path ]; then
    log::error "[$(timestamp)][fs::write] path $path not found"
    exit 1
  fi

  local origin_text=$(fs::read $path)

  # echo "origin_text: $origin_text"
  # echo "text: $text"

  # no permission
  # try to use sudo/root
  if [ ! -w $path ]; then
    sudo tee $path >>/dev/null <<EOF
${text}
${origin_text}
EOF
    return
  fi

  cat <<EOF >$path
${text}
${origin_text}
EOF
}

fs::remove_empty_line() {
  local file_path=$1
  local tmp_file_path=$(os::tmp_file)
  if [ -z "$file_path" ]; then
    log::error "[$(timestamp)][fs::remove_empty_line] file_path is required"
    exit 1
  fi

  # copy tmp
  log::debug "[$(timestamp)][fs::remove_empty_line] cp $file_path $tmp_file_path"
  cp $file_path $tmp_file_path

  # remove empty line
  #   reference: https://stackoverflow.com/questions/10347653/awk-remove-blank-lines
  awk NF $tmp_file_path >$file_path
}

fs::remove_line_has_str() {
  local file_path=$1
  local match_str=$2

  if [ -z "$file_path" ] || [ -z "$match_str" ]; then
    log::error "[$(timestamp)][fs::remove_line_has_str] file_path and match_str is required"
    exit 1
  fi

  # sed -i -e "s%.*${match_str}.*%%g" $file_path
  # sed -i "/${match_str}/d" $file_path
  local tmp_file_path=$(os::tmp_file)
  cp $file_path $tmp_file_path
  cat $tmp_file_path |
    sed -e "/${match_str}/d" |
    sudo tee $file_path >>/dev/null 2>&1

  # # fix emtpy line
  # fs::remove_empty_line $file_path
}

fs::watch() {
  local filepath=$1
  local action=$2

  if [ ! -e "$filepath" ]; then
    log::error "[$(timestamp)][fs::watch] filepath($filepath) not found"
    exit 1
  fi

  if [ ! -f "$filepath" ]; then
    log::error "[$(timestamp)][fs::watch] filepath($filepath) should be a file, but not"
    exit 1
  fi

  if [ -z "$action" ]; then
    log::error "[$(timestamp)][fs::watch] action is required"
    exit 1
  fi

  local last_changed_at=$(ls -l "$filepath")
  local is_stopping=false

  function fn_stop() {
    is_stopping=true
  }

  log::info "[$(os::timestamp)][fs::watch][start] file: $filepath with ${command} ..."

  while true; do
    sleep 1
    # log::info "[$(os::timestamp)][$(date +'%Y-%m-%d %H:%M:%S')] checking file: $filepath ..."
    if [ "$is_stopping" = "true" ]; then
      log::info "[$(os::timestamp)]is during stoping, ignore change (file: $filepath)..."
      continue
    fi

    local new_changed_at=$(ls -l "$filepath")
    if [ "$new_changed_at" != "$last_changed_at" ]; then
      log::info "[$(os::timestamp)][fs::watch][changed] file: $filepath ..."

      $action $filepath fn_stop

      last_changed_at="$new_changed_at"
    fi
  done
}

export -f fs::write
export -f fs::read

export -f fs::append
export -f fs::prepend

export -f fs::remove_line_has_str
export -f fs::remove_empty_line

export -f fs::watch
