#!/bin/bash

version::update() {
  PREV=$ZMICRO_VERSION

  config::load_core_mod

  LATEST=$ZMICRO_VERSION

  # echo "Load Version: $ZMICRO_VERSION"
  # echo "BBB: $PREV => $LATEST"
  log::version $PREV $LATEST

  echo $LATEST
}

version::timestamp() {
  local path=$1
  cd $path

  git::commit_timestamp
}

version::get() {
  local path=$1
  cd $path

  config::load_mod $path

  # @TODO REMOVE patch next version
  if [ "$PLUGIN_VERSION" ]; then
    export VERSION=$PLUGIN_VERSION
  fi

  echo $VERSION
}

version::git_hash() {
  local path=$1
  cd $path

  git::commit_hash
}

version::echo() {
  local path=$1
  local version=$(version::get $path)
  local git_hash=$(version::git_hash $path)
  local timestamp=$(version::timestamp $path)

  echo "$(color::green $version) (${git_hash} ${timestamp})"
}

version::zmicro() {
  version::get $ZMICRO_HOME
}

version::zmicro_num() {
  version::get $ZMICRO_HOME | awk -F 'v' '{print $2}'
}

version::main() {
  version::echo $ZMICRO_HOME
}

version::plugin() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][version::plugin] plugin name is required"
    exit 1
  fi

  local path=$(plugin::get_path $name)
  version::echo $path
}

version::package() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][version::package] package name is required"
    exit 1
  fi

  local path=$ZMICRO_HOME/plugins/package/packages/$name
  if [ ! -d "$path" ]; then
    log::error "[$(timestamp)][version::package] package(${name}) does not exist"
    exit 1
  fi

  version::echo $path
}

version::service() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][version::service] service name is required"
    exit 1
  fi

  local path=$ZMICRO_HOME/plugins/service/services/$name
  if [ ! -d "$path" ]; then
    log::error "[$(timestamp)][version::service] service(${name}) does not exist"
    exit 1
  fi

  version::echo $path
}

version::swarm() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][version::swarm] swarm name is required"
    exit 1
  fi

  local path=$ZMICRO_HOME/plugins/swarm/swarms/$name
  if [ ! -d "$path" ]; then
    log::error "[$(timestamp)][version::swarm] swarm(${name}) does not exist"
    exit 1
  fi

  version::echo $path
}

version::at() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][version::at] at name is required"
    exit 1
  fi

  string::has @ $name
}

# Found name
# Example:
#   name@version => name 
version::at_name() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][version::at_name] at name is required"
    exit 1
  fi

  echo $name | awk -F '@' '{print $1}'
}

# Found version
# Example:
#   name@version => version
version::at_version() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][version::at_version] at name is required"
    exit 1
  fi

  echo $name | awk -F '@' '{print $2}'
}

version::is_valid() {
  local version=$1
  if [ -z "$version" ]; then
    echo "false"
    return
  fi

  if [[ $version =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "true"
  else
    echo "false"
  fi
}

version::compare_equals() {
  local v1=$1
  local v2=$2

  if [ "$v1" == "$v2" ]; then
    echo "true"
  else
    echo "false"
  fi
}

version::compare_gt() {
  local v1=$1
  local v2=$2

  # v6.7.8
  # v11=6 v12=7 v13=8
  local v11=$(echo ${v1#v} | awk -F '.' '{print $1}' | awk -F 'v' '{print $1}')
  local v12=$(echo ${v1#v} | awk -F '.' '{print $2}')
  local v13=$(echo ${v1#v} | awk -F '.' '{print $3}')
  
  local v21=$(echo ${v2#v} | awk -F '.' '{print $1}' | awk -F 'v' '{print $1}')
  local v22=$(echo ${v2#v} | awk -F '.' '{print $2}')
  local v23=$(echo ${v2#v} | awk -F '.' '{print $3}')

  if (( $v11 < $v21 )); then
    echo "false"
    return
  elif (( $v11 > $v21 )); then
    echo "true"
    return
  fi

  if (( $v12 < $v22 )); then
    echo "false"
    return
  elif (( $v12 > $v22 )); then
    echo "true"
    return
  fi

  if (( $v13 <= $v23 )); then
    echo "false"
    return
  fi

  echo "true"
}

version::compare_lt() {
  local v1=$1
  local v2=$2

  version::compare_gt $v2 $v1
}

version::next() {
  local v1=$1

  local v11=$(echo ${v1#v} | awk -F '.' '{print $1}' | awk -F 'v' '{print $1}')
  local v12=$(echo ${v1#v} | awk -F '.' '{print $2}')
  local v13=$(echo ${v1#v} | awk -F '.' '{print $3}')

  local v131=$((v13+1))

  echo "v$v11.$v12.$v131"
}

version::get_major() {
  local v1=$1
  local prefix=$2

  if [ -z "$prefix" ]; then
    prefix="v"
  fi

  local v11=$(echo ${v1#v} | awk -F '.' '{print $1}' | awk -F 'v' '{print $1}')
  echo "${prefix}${v11}"
}

version::get_minor() {
  local v1=$1
    local prefix=$2

  if [ -z "$prefix" ]; then
    prefix="v"
  fi

  local v11=$(echo ${v1#v} | awk -F '.' '{print $1}' | awk -F 'v' '{print $1}')
  local v12=$(echo ${v1#v} | awk -F '.' '{print $2}')
  echo "${prefix}${v11}.${v12}"
}

version::get_patch() {
  local v1=$1
  local prefix=$2

  if [ -z "$prefix" ]; then
    prefix="v"
  fi

  local v11=$(echo ${v1#v} | awk -F '.' '{print $1}' | awk -F 'v' '{print $1}')
  local v12=$(echo ${v1#v} | awk -F '.' '{print $2}')
  local v13=$(echo ${v1#v} | awk -F '.' '{print $3}')

  echo "${prefix}$v11.$v12.$v13"
}

export -f version::get
export -f version::git_hash
export -f version::timestamp

export -f version::zmicro
export -f version::zmicro_num

export -f version::echo

export -f version::main
export -f version::plugin
export -f version::service
export -f version::swarm

export -f version::update

export -f version::at
export -f version::at_name
export -f version::at_version

export -f version::is_valid

export -f version::compare_equals
export -f version::compare_gt
export -f version::compare_lt

export -f version::next

export -f version::get_major
export -f version::get_minor
export -f version::get_patch
