#!/bin/bash

version::update() {
  PREV=$ZMICRO_VERSION

  config::load_core_mod

  LATEST=$ZMICRO_VERSION

  # echo "Load Version: $ZMICRO_VERSION"
  # echo "BBB: $PREV => $LATEST"
  log::version $PREV $LATEST

  echo $LATEST
}

version::timestamp() {
  local path=$1
  cd $path

  git show -s --format=%cd --date="format:%Y-%m-%d"
}

version::get() {
  local path=$1
  cd $path

  config::load_mod $path

  # @TODO REMOVE patch next version
  if [ "$PLUGIN_VERSION" ]; then
    export VERSION=$PLUGIN_VERSION
  fi

  echo $VERSION
}

version::git_hash() {
  local path=$1
  cd $path

  git rev-parse --short=9 HEAD
}

version::echo() {
  local path=$1
  local version=$(version::get $path)
  local git_hash=$(version::git_hash $path)
  local timestamp=$(version::timestamp $path)

  echo "$(color::green $version) (${git_hash} ${timestamp})"
}

version::main() {
  version::echo $ZMICRO_HOME
}

version::plugin() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][version::plugin] plugin name is required"
    exit 1
  fi

  local path=$(plugin::get_path $name)
  version::echo $path
}

version::package() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][version::package] package name is required"
    exit 1
  fi

  local path=$ZMICRO_HOME/plugins/package/packages/$name
  if [ ! -d "$path" ]; then
    log::error "[$(timestamp)][version::package] package(${name}) does not exist"
    exit 1
  fi

  version::echo $path
}

version::service() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][version::service] service name is required"
    exit 1
  fi

  local path=$ZMICRO_HOME/plugins/service/services/$name
  if [ ! -d "$path" ]; then
    log::error "[$(timestamp)][version::service] service(${name}) does not exist"
    exit 1
  fi

  version::echo $path
}

version::swarm() {
  local name=$1
  if [ -z "$name" ]; then
    log::error "[$(timestamp)][version::swarm] swarm name is required"
    exit 1
  fi

  local path=$ZMICRO_HOME/plugins/swarm/swarms/$name
  if [ ! -d "$path" ]; then
    log::error "[$(timestamp)][version::swarm] swarm(${name}) does not exist"
    exit 1
  fi

  version::echo $path
}

export -f version::get
export -f version::git_hash
export -f version::timestamp

export -f version::echo

export -f version::main
export -f version::plugin
export -f version::service
export -f version::swarm

export -f version::update